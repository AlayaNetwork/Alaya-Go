{"name": "test_VP_GPFV_013", "status": "failed", "statusDetails": {"message": "AssertionError: ErrMsg:Consensus Amount of pledge 755068914772727272727280\nassert 755068914772727272727280 == 1127534457386363636363640\n  -755068914772727272727280\n  +1127534457386363636363640", "trace": "new_genesis_env = <environment.env.TestEnvironment object at 0x00000269F5964CC0>\nclients_consensus = [<tests.lib.client.Client object at 0x00000269F6CBAD30>, <tests.lib.client.Client object at 0x00000269F6C8A940>, <tests.lib.client.Client object at 0x00000269F57587B8>, <tests.lib.client.Client object at 0x00000269F6CDF080>]\n\n    @pytest.mark.P2\n    def test_VP_GPFV_013(new_genesis_env, clients_consensus):\n        \"\"\"\n        验证人被处罚后质押金=>创建验证人的最小质押门槛金额K\n        :param new_genesis_env:\n        :param new_genesis_env:\n        :return:\n        \"\"\"\n        # Change configuration parameters\n        genesis = from_dict(data_class=Genesis, data=new_genesis_env.genesis_config)\n        genesis.economicModel.slashing.slashBlocksReward = 5\n        new_file = new_genesis_env.cfg.env_tmp + \"/genesis.json\"\n        genesis.to_file(new_file)\n        new_genesis_env.deploy_all(new_file)\n    \n        client1 = clients_consensus[0]\n        log.info(\"Current connection node1: {}\".format(client1.node.node_mark))\n        client2 = clients_consensus[1]\n        log.info(\"Current connection node2: {}\".format(client2.node.node_mark))\n        economic = client1.economic\n        node = client1.node\n        # Wait for the consensus round to end\n        economic.wait_consensus_blocknum(node, 1)\n        # get pledge amount1 and block reward\n        pledge_amount1, block_reward, slash_blocks = get_out_block_penalty_parameters(client1, node, 'Released')\n        log.info(\"Current block height: {}\".format(client1.node.eth.blockNumber))\n        # stop node\n        client1.node.stop()\n        # Waiting for a 3 consensus round\n        client2.economic.wait_consensus_blocknum(client2.node)\n        print(client2.node.debug.getWaitSlashingNodeList())\n        client2.economic.wait_consensus_blocknum(client2.node)\n        print(client2.node.debug.getWaitSlashingNodeList())\n        client2.economic.wait_consensus_blocknum(client2.node)\n        print(client2.node.debug.getWaitSlashingNodeList())\n        log.info(\"Current block height: {}\".format(client2.node.eth.blockNumber))\n        # view verifier list\n        verifier_list = client2.ppos.getVerifierList()\n        log.info(\"verifier_list: {}\".format(verifier_list))\n        candidate_info = client2.ppos.getCandidateInfo(client1.node.node_id)\n        log.info(\"Pledge node information： {}\".format(candidate_info))\n        pledge_amount2 = candidate_info['Ret']['Released']\n        punishment_amonut = int(Decimal(str(block_reward)) * Decimal(str(slash_blocks)))\n        log.info(\"punishment_amonut: {}\".format(punishment_amonut))\n>       assert pledge_amount2 == pledge_amount1 - punishment_amonut, \"ErrMsg:Consensus Amount of pledge {}\".format(\n            pledge_amount2)\nE       AssertionError: ErrMsg:Consensus Amount of pledge 755068914772727272727280\nE       assert 755068914772727272727280 == 1127534457386363636363640\nE         -755068914772727272727280\nE         +1127534457386363636363640\n\nblock_reward = 74493108522727272727272\ncandidate_info = {'Code': 0, 'Ret': {'BenefitAddress': '0x1000000000000000000000000000000000000003', 'BlsPubKey': 'fa340928f6edfb9f4c3d...c1348c7883ccfcdd1d529929fc329086164286613a95880332be843b705baf28a', 'DelegateEpoch': 0, 'DelegateRewardTotal': 0, ...}}\nclient1    = <tests.lib.client.Client object at 0x00000269F6CBAD30>\nclient2    = <tests.lib.client.Client object at 0x00000269F6C8A940>\nclients_consensus = [<tests.lib.client.Client object at 0x00000269F6CBAD30>, <tests.lib.client.Client object at 0x00000269F6C8A940>, <tests.lib.client.Client object at 0x00000269F57587B8>, <tests.lib.client.Client object at 0x00000269F6CDF080>]\neconomic   = <tests.lib.economic.Economic object at 0x00000269F6CBABE0>\ngenesis    = Genesis(config=Config(chainId=100, eip155Block=3, cbft=Cbft(initialNodes=[{'node': 'enode://488fb1c783f7ac6a20d320e844...': '0'}}, number='0x0', gasUsed='0x0', parentHash='0x0000000000000000000000000000000000000000000000000000000000000000')\nnew_file   = 'D:\\\\GO\\\\src\\\\github.com\\\\PlatONnetwork\\\\PlatON-Go\\\\cases\\\\deploy\\\\tmp\\\\lifapan\\\\env/genesis.json'\nnew_genesis_env = <environment.env.TestEnvironment object at 0x00000269F5964CC0>\nnode       = <environment.node.Node object at 0x00000269F51BE9B0>\npledge_amount1 = 1500000000000000000000000\npledge_amount2 = 755068914772727272727280\npunishment_amonut = 372465542613636363636360\nslash_blocks = '5'\nverifier_list = {'Code': 0, 'Ret': [{'BenefitAddress': '0x1000000000000000000000000000000000000003', 'BlsPubKey': 'b823674b30877e4cc16...b96aa54009ffa655cea68ae81f44515483d9f5a939d31a9e0d34bd02', 'DelegateRewardTotal': '0x0', 'DelegateTotal': '0x0', ...}]}\n\ntests\\ppos\\test_general_punishment.py:553: AssertionError"}, "description": "\n    验证人被处罚后质押金=>创建验证人的最小质押门槛金额K\n    :param new_genesis_env:\n    :param new_genesis_env:\n    :return:\n    ", "attachments": [{"name": "env log", "source": "dc84cf61-cb7e-4351-8589-524571d0ec47-attachment.uri", "type": "text/uri-list"}, {"name": "env status", "source": "8d06977e-cc94-4dbd-b149-1ef6d7a62117-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "0dbedd79-73be-447b-89aa-b4f237094fff-attachment.txt", "type": "text/plain"}], "start": 1586632338387, "stop": 1586632460516, "uuid": "df3a3e73-1e43-4b5f-8075-a8cc64532b1e", "historyId": "0522b6dd2916c57fc2e43d98d36f5e89", "testCaseId": "d091e0504af3ba18b340482f87d144f7", "fullName": "tests.ppos.test_general_punishment#test_VP_GPFV_013", "labels": [{"name": "tag", "value": "P2"}, {"name": "parentSuite", "value": "tests.ppos"}, {"name": "suite", "value": "test_general_punishment"}, {"name": "host", "value": "hietel"}, {"name": "thread", "value": "25124-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ppos.test_general_punishment"}]}