{"name": "test_ZB_NP_29", "status": "broken", "statusDetails": {"message": "ValueError: {'code': -32000, 'message': 'the tx data is invalid: the func is not exist'}", "trace": "update_zero_produce_env = <environment.env.TestEnvironment object at 0x00000269F5964CC0>\nclients_noconsensus = [<tests.lib.client.Client object at 0x00000269F6E458D0>, <tests.lib.client.Client object at 0x00000269F6C2FCF8>, <tests.lib.client.Client object at 0x00000269F6D02EB8>, <tests.lib.client.Client object at 0x00000269F6F5A710>]\n\n    def test_ZB_NP_29(update_zero_produce_env, clients_noconsensus):\n        client_a = clients_noconsensus[0]\n        client_b = clients_noconsensus[1]\n        amount = calculate(client_a.economic.create_staking_limit, 5)\n        staking_amount_a = calculate(client_a.economic.create_staking_limit, 1)\n        staking_amount_b = calculate(client_a.economic.create_staking_limit, 2)\n        staking_address, _ = client_a.economic.account.generate_account(client_a.node.web3, amount)\n        result = client_a.staking.create_staking(0, staking_address, staking_address, amount=staking_amount_a, reward_per=10)\n        assert_code(result, 0)\n        economic = client_b.economic\n        economic.wait_settlement_blocknum(client_b.node)\n        client_a.node.stop()\n    \n        economic = client_b.economic\n        node = economic.env.get_consensus_node_by_index(0)\n    \n        initial_validator, slashing_node_list = gen_validator_list(economic.env.consensus_node_id_list(), client_a.node.node_id)\n    \n>       assert_set_validator_list(node, initial_validator)\n\n_          = 'ff9f0800e246d849f7594b7db56c8fe300b472d98b9da050880372dc5ddc2544'\namount     = 5000000000000000000000000\nclient_a   = <tests.lib.client.Client object at 0x00000269F6E458D0>\nclient_b   = <tests.lib.client.Client object at 0x00000269F6C2FCF8>\nclients_noconsensus = [<tests.lib.client.Client object at 0x00000269F6E458D0>, <tests.lib.client.Client object at 0x00000269F6C2FCF8>, <tests.lib.client.Client object at 0x00000269F6D02EB8>, <tests.lib.client.Client object at 0x00000269F6F5A710>]\neconomic   = <tests.lib.economic.Economic object at 0x00000269F6C2F240>\ninitial_validator = ['488fb1c783f7ac6a20d320e8442ddebe8cf983f5eda7effd00b919afdcf31dcd10e6b2bcee158245fef3a587e0248bea8cf8f6905af833623d03...b2046a77afb48a13f875c17d674421eda9c5345c32d9378490326d628e9f9b60392fcf7832ba82c9ebf5953573d6f93878c24f77e9cb53ee59fec']\nnode       = <environment.node.Node object at 0x00000269F51BE9B0>\nresult     = 0\nslashing_node_list = ['cfdf43591661d0107b7389a0ef68a2681cdf67d93183e36201acb631920cee349d4c6d7e8557602e101df0fe6b2e6808c66e0a27a2942096348f...0a9bf5bf7c6f5fb2abbeea3546d6557cec02992f7753f99c2e39f87fdbdb6280d7fc8a243518ef27834e55eb03ad6d8ef2f627b8f0001ee185300']\nstaking_address = '0xc8A56532096b002a1f177747562cf5b252B9c8ea'\nstaking_amount_a = 1000000000000000000000000\nstaking_amount_b = 2000000000000000000000000\nupdate_zero_produce_env = <environment.env.TestEnvironment object at 0x00000269F5964CC0>\n\ntests\\ppos\\test_slashing_zero.py:455: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\ppos\\test_slashing_zero.py:28: in assert_set_validator_list\n    result = node.debug.setValidatorList(validator_list, pri_key)\nc:\\users\\hietel\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\client_sdk_python\\debug.py:22: in setValidatorList\n    return send_obj_transaction(self, data, self.web3.stakingAddress, pri_key, transaction_cfg)\nc:\\users\\hietel\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\client_sdk_python\\utils\\transactions.py:72: in send_obj_transaction\n    tx_hash = HexBytes(obj.web3.platon.sendRawTransaction(signed_data)).hex()\nc:\\users\\hietel\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\client_sdk_python\\eth.py:300: in sendRawTransaction\n    [raw_transaction],\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <client_sdk_python.manager.RequestManager object at 0x00000269F55230F0>, method = 'platon_sendRawTransaction'\nparams = [HexBytes('0xf9017c018405f5e1008303345094100000000000000000000000000000000000000280b90115f901128382076cb9010bf90108b84...4f382baaed3057e4c8c33792847376389855e32850f419e1bca04f2569dad28af5b77b30a5841e14e208b3b36b3ecd675916e58dd358f40462f1')]\n\n    def request_blocking(self, method, params):\n        \"\"\"\n        Make a synchronous request using the provider\n        \"\"\"\n        response = self._make_request(method, params)\n    \n        if \"error\" in response:\n>           raise ValueError(response[\"error\"])\nE           ValueError: {'code': -32000, 'message': 'the tx data is invalid: the func is not exist'}\n\nmethod     = 'platon_sendRawTransaction'\nparams     = [HexBytes('0xf9017c018405f5e1008303345094100000000000000000000000000000000000000280b90115f901128382076cb9010bf90108b84...4f382baaed3057e4c8c33792847376389855e32850f419e1bca04f2569dad28af5b77b30a5841e14e208b3b36b3ecd675916e58dd358f40462f1')]\nresponse   = {'error': {'code': -32000, 'message': 'the tx data is invalid: the func is not exist'}, 'id': 3, 'jsonrpc': '2.0'}\nself       = <client_sdk_python.manager.RequestManager object at 0x00000269F55230F0>\n\nc:\\users\\hietel\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\client_sdk_python\\manager.py:112: ValueError"}, "attachments": [{"name": "env log", "source": "ddf3587c-912b-4208-8597-65a8ee8546f3-attachment.uri", "type": "text/uri-list"}, {"name": "env status", "source": "a96896f6-6e55-4d67-92be-8fc568664d05-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "496c8ce5-a9be-4340-b2c4-744cc0315b1d-attachment.txt", "type": "text/plain"}], "start": 1586654013759, "stop": 1586654113368, "uuid": "6a564e0b-365b-4a96-9b8a-7aa90689db93", "historyId": "483f18af047b017576566331c2429894", "testCaseId": "4ab9c6860c76a060ca7c261e8bfee461", "fullName": "tests.ppos.test_slashing_zero#test_ZB_NP_29", "labels": [{"name": "parentSuite", "value": "tests.ppos"}, {"name": "suite", "value": "test_slashing_zero"}, {"name": "host", "value": "hietel"}, {"name": "thread", "value": "25124-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ppos.test_slashing_zero"}]}