{"name": "test_ZB_NP_35", "status": "broken", "statusDetails": {"message": "ValueError: {'code': -32000, 'message': 'the tx data is invalid: the func is not exist'}", "trace": "new_genesis_env = <environment.env.TestEnvironment object at 0x00000269F5964CC0>, client_consensus = <tests.lib.client.Client object at 0x00000269F586BF60>\nclient_noconsensus = <tests.lib.client.Client object at 0x00000269F6E34438>\n\n    def test_ZB_NP_35(new_genesis_env, client_consensus,  client_noconsensus):\n        \"\"\"\n        共识轮阈值大值变小值提案未生效时，节点零出块率处罚（不存在零出块记录）\n        \"\"\"\n        update_zero_produce(new_genesis_env)\n        economic = client_noconsensus.economic\n        node = economic.env.get_consensus_node_by_index(0)\n        create_pledge_node_information(client_noconsensus)\n    \n        # Voting failed and expired\n        param_governance_verify_before_endblock(client_consensus, 'slashing', 'zeroProduceCumulativeTime', '3', True)\n    \n        # Start execution use case\n        initial_validator, slashing_node_list = gen_validator_list(economic.env.consensus_node_id_list(), client_noconsensus.node.node_id)\n        log.info(\"verifier nodeid list: {}\".format(initial_validator))\n        client_noconsensus.node.stop()\n    \n>       set_slashing(initial_validator, slashing_node_list, node, economic, \"1101\")\n\nclient_consensus = <tests.lib.client.Client object at 0x00000269F586BF60>\nclient_noconsensus = <tests.lib.client.Client object at 0x00000269F6E34438>\neconomic   = <tests.lib.economic.Economic object at 0x00000269F6E34A58>\ninitial_validator = ['488fb1c783f7ac6a20d320e8442ddebe8cf983f5eda7effd00b919afdcf31dcd10e6b2bcee158245fef3a587e0248bea8cf8f6905af833623d03...b2046a77afb48a13f875c17d674421eda9c5345c32d9378490326d628e9f9b60392fcf7832ba82c9ebf5953573d6f93878c24f77e9cb53ee59fec']\nnew_genesis_env = <environment.env.TestEnvironment object at 0x00000269F5964CC0>\nnode       = <environment.node.Node object at 0x00000269F51BE9B0>\nslashing_node_list = ['cfdf43591661d0107b7389a0ef68a2681cdf67d93183e36201acb631920cee349d4c6d7e8557602e101df0fe6b2e6808c66e0a27a2942096348f...0a9bf5bf7c6f5fb2abbeea3546d6557cec02992f7753f99c2e39f87fdbdb6280d7fc8a243518ef27834e55eb03ad6d8ef2f627b8f0001ee185300']\n\ntests\\ppos\\test_Zero_out_penalty.py:578: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\ppos\\test_Zero_out_penalty.py:67: in set_slashing\n    assert_set_validator_list(node, do[state])\ntests\\ppos\\test_Zero_out_penalty.py:37: in assert_set_validator_list\n    result = node.debug.setValidatorList(validator_list, pri_key)\nc:\\users\\hietel\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\client_sdk_python\\debug.py:22: in setValidatorList\n    return send_obj_transaction(self, data, self.web3.stakingAddress, pri_key, transaction_cfg)\nc:\\users\\hietel\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\client_sdk_python\\utils\\transactions.py:72: in send_obj_transaction\n    tx_hash = HexBytes(obj.web3.platon.sendRawTransaction(signed_data)).hex()\nc:\\users\\hietel\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\client_sdk_python\\eth.py:300: in sendRawTransaction\n    [raw_transaction],\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <client_sdk_python.manager.RequestManager object at 0x00000269F5758AC8>, method = 'platon_sendRawTransaction'\nparams = [HexBytes('0xf9017d0185746a5288008303345094100000000000000000000000000000000000000280b90115f901128382076cb9010bf90108b...95aba831e6c8e2b63ce790f86d33e5dc159e02defcd271348fa04ccd1f4f305797b17357c03360422fa7014867ae4996db9ea14b872acac2ab7c')]\n\n    def request_blocking(self, method, params):\n        \"\"\"\n        Make a synchronous request using the provider\n        \"\"\"\n        response = self._make_request(method, params)\n    \n        if \"error\" in response:\n>           raise ValueError(response[\"error\"])\nE           ValueError: {'code': -32000, 'message': 'the tx data is invalid: the func is not exist'}\n\nmethod     = 'platon_sendRawTransaction'\nparams     = [HexBytes('0xf9017d0185746a5288008303345094100000000000000000000000000000000000000280b90115f901128382076cb9010bf90108b...95aba831e6c8e2b63ce790f86d33e5dc159e02defcd271348fa04ccd1f4f305797b17357c03360422fa7014867ae4996db9ea14b872acac2ab7c')]\nresponse   = {'error': {'code': -32000, 'message': 'the tx data is invalid: the func is not exist'}, 'id': 7, 'jsonrpc': '2.0'}\nself       = <client_sdk_python.manager.RequestManager object at 0x00000269F5758AC8>\n\nc:\\users\\hietel\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\client_sdk_python\\manager.py:112: ValueError"}, "description": "\n    共识轮阈值大值变小值提案未生效时，节点零出块率处罚（不存在零出块记录）\n    ", "attachments": [{"name": "env log", "source": "d75af758-2539-44ae-990a-cefa01385080-attachment.uri", "type": "text/uri-list"}, {"name": "env status", "source": "a60b1d5c-ade4-4c2e-a705-ab539cada095-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "67b1b783-605e-4e16-bc09-d3a02cd14060-attachment.txt", "type": "text/plain"}], "start": 1586611663070, "stop": 1586611777807, "uuid": "c2509658-8420-4ab5-8fb1-ff7e459f1150", "historyId": "e376fa90edfd6273aeb7d44a9b9f79df", "testCaseId": "0c4ace590ca22ee86d1bc8b1156a0246", "fullName": "tests.ppos.test_Zero_out_penalty#test_ZB_NP_35", "labels": [{"name": "parentSuite", "value": "tests.ppos"}, {"name": "suite", "value": "test_Zero_out_penalty"}, {"name": "host", "value": "hietel"}, {"name": "thread", "value": "25124-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ppos.test_Zero_out_penalty"}]}