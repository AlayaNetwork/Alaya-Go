{"name": "test_IN_DR_005_IN_DR_015", "status": "failed", "statusDetails": {"message": "AssertionError: assert 8499999986173200000000 == 8499999986186000000000\n  -8499999986173200000000\n  +8499999986186000000000", "trace": "self = <tests.ppos.test_rewards_interface.TestwithdrawDelegateReward object at 0x00000269F5AF7240>\nclients_new_node = [<tests.lib.client.Client object at 0x00000269F5A58D30>, <tests.lib.client.Client object at 0x00000269F5AF72B0>, <tests.lib.client.Client object at 0x00000269F5555780>, <tests.lib.client.Client object at 0x00000269F6CDFD30>]\nreset_environment = None\n\n    @pytest.mark.P2\n    def test_IN_DR_005_IN_DR_015(self, clients_new_node, reset_environment):\n        client0 = clients_new_node[0]\n        client1 = clients_new_node[1]\n        address0, _ = client0.economic.account.generate_account(client0.node.web3, init_amount)\n        address1, _ = client0.economic.account.generate_account(client0.node.web3, init_amount)\n        staking_and_delegate(client0, address0)\n        staking_and_delegate(client1, address1)\n        staking_num0 = client0.staking.get_stakingblocknum()\n        staking_num1 = client1.staking.get_stakingblocknum()\n        result = client1.delegate.delegate(0, address1, node_id=client0.node.node_id, amount=delegate_amount)\n        assert_code(result, 0)\n        client0.economic.wait_settlement_blocknum(client0.node, 1)\n        rewards0 = client0.delegate.get_delegate_reward_by_nodeid(address0)\n        log.info('Address {} delegate rewards : {}'.format(address0, rewards0))\n        assert rewards0 > 0\n        rewards1 = client1.delegate.get_delegate_reward_by_nodeid(address1)\n        log.info('Address {} delegate rewards : {}'.format(address1, rewards1))\n        assert rewards1 > 0\n        balance_before0 = client0.node.eth.getBalance(address0)\n        log.info('Address {} before withdraw delegate balance : {}'.format(address0, balance_before0))\n        balance_before1 = client1.node.eth.getBalance(address1)\n        log.info('Address {} before withdraw delegate balance : {}'.format(address0, balance_before1))\n        result = client0.delegate.withdrew_delegate(staking_num0, address0, amount=int(delegate_amount/2))\n        assert_code(result, 0)\n        result = client0.delegate.withdrew_delegate(staking_num0, address1, amount=int(delegate_amount/2))\n        assert_code(result, 0)\n    \n        data0 = rlp.encode([rlp.encode(int(1005)), rlp.encode(staking_num0), rlp.encode(bytes.fromhex(\n            client0.node.node_id)), rlp.encode(int(delegate_amount/2))])\n        data1 = rlp.encode([rlp.encode(int(1005)), rlp.encode(staking_num1), rlp.encode(bytes.fromhex(\n            client1.node.node_id)), rlp.encode(int(delegate_amount/2))])\n        gas0 = (21000 + 6000 + 8000 + 100 + get_the_dynamic_parameter_gas_fee(data0)) * client0.node.eth.gasPrice\n        gas1 = (21000 + 6000 + 8000 + 100 + get_the_dynamic_parameter_gas_fee(data1)) * client0.node.eth.gasPrice\n        balance_after0 = client0.node.eth.getBalance(address0)\n        log.info('Address {} before withdraw delegate balance : {}'.format(address0, balance_after0))\n        balance_after1 = client0.node.eth.getBalance(address1)\n        log.info('Address {} before withdraw delegate balance : {}'.format(address0, balance_after1))\n    \n        rewards0_after = client0.delegate.get_delegate_reward_by_nodeid(address0)\n        log.info('Address {} delegate rewards : {}'.format(address0, rewards0))\n        rewards1_after = client0.delegate.get_delegate_reward_by_nodeid(address1)\n        log.info('Address {} delegate rewards : {}'.format(address1, rewards1))\n        assert rewards0 == rewards0_after\n        assert rewards1 == rewards1_after\n        assert balance_before0 - gas0 + int(delegate_amount/2) == balance_after0\n>       assert balance_before1 - gas1 + int(delegate_amount/2) == balance_after1\nE       assert 8499999986173200000000 == 8499999986186000000000\nE         -8499999986173200000000\nE         +8499999986186000000000\n\n_          = 'cd5ae2767311707920511d2fd5f3e880287d94538e1ddc582d2730822f4f0bfd'\naddress0   = '0xAf0B8a71D0b05Ae43b3Fb2532b0080BCFf28AF9D'\naddress1   = '0x3B301f75e891eFd3E214253bbe8A532b1a94d8c2'\nbalance_after0 = 9499999991064800000000\nbalance_after1 = 8499999986186000000000\nbalance_before0 = 8999999995134000000000\nbalance_before1 = 7999999990255200000000\nclient0    = <tests.lib.client.Client object at 0x00000269F5A58D30>\nclient1    = <tests.lib.client.Client object at 0x00000269F5AF72B0>\nclients_new_node = [<tests.lib.client.Client object at 0x00000269F5A58D30>, <tests.lib.client.Client object at 0x00000269F5AF72B0>, <tests.lib.client.Client object at 0x00000269F5555780>, <tests.lib.client.Client object at 0x00000269F6CDFD30>]\ndata0      = b'\\xf8T\\x83\\x82\\x03\\xed\\x0f\\xb8B\\xb8@k\\x84\\xcc\\xae\\xae\\xd0\\xa9\\xbf[\\xf7\\xc6\\xf5\\xfb*\\xbb\\xee\\xa3TmeW\\xce\\xc0)\\x92\\xf7u...(\\r\\x7f\\xc8\\xa2CQ\\x8e\\xf2x4\\xe5^\\xb0:\\xd6\\xd8\\xef/b{\\x8f\\x00\\x01\\xee\\x18S\\x00\\x8a\\x89\\x1b\\x1a\\xe4\\xd6\\xe2\\xefP\\x00\\x00'\ndata1      = b'\\xf8T\\x83\\x82\\x03\\xed\\x1c\\xb8B\\xb8@\\xb4 E\\xbc\\x98\\x1d\\xcbo\\xe4\\xe8f\\xfbb\\xea>\\x1d\\xc3\\xe0\\x91\\x9bc\\ni\\xd2\\x93\\xa5u\\x...\\xb2\\x99Pt/\\xa3\\xb7\\xe6\\xa0\\xd2\\xbc\\x9c\\xbe9(G\\x02\\xdcU\\xa7\\xe2\\xcbj\\xc2\\xf7H\\x8a\\x89\\x1b\\x1a\\xe4\\xd6\\xe2\\xefP\\x00\\x00'\ngas0       = 4069200000000\ngas1       = 4082000000000\nreset_environment = None\nresult     = 0\nrewards0   = 113930636564171122994646\nrewards0_after = 113930636564171122994646\nrewards1   = 385611385294117647058798\nrewards1_after = 385611385294117647058798\nself       = <tests.ppos.test_rewards_interface.TestwithdrawDelegateReward object at 0x00000269F5AF7240>\nstaking_num0 = 15\nstaking_num1 = 28\n\ntests\\ppos\\test_rewards_interface.py:940: AssertionError"}, "attachments": [{"name": "env log", "source": "99e26b61-bf15-4ddc-ac11-3ffb5b767949-attachment.uri", "type": "text/uri-list"}, {"name": "env status", "source": "1b3a7f52-152e-433f-97c0-230ffeaa0e95-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "58d8d017-b393-47f5-925a-822f71fb4747-attachment.txt", "type": "text/plain"}], "start": 1586649103446, "stop": 1586649303037, "uuid": "f6132541-22b1-46e6-9fe9-f433a643cfac", "historyId": "45995eb5f3590e5aa67fb700d60ad2ad", "testCaseId": "b3ccdc17ed1ee1a5c8a52cf61d0d97dd", "fullName": "tests.ppos.test_rewards_interface.TestwithdrawDelegateReward#test_IN_DR_005_IN_DR_015", "labels": [{"name": "tag", "value": "P2"}, {"name": "parentSuite", "value": "tests.ppos"}, {"name": "suite", "value": "test_rewards_interface"}, {"name": "subSuite", "value": "TestwithdrawDelegateReward"}, {"name": "host", "value": "hietel"}, {"name": "thread", "value": "25124-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ppos.test_rewards_interface"}]}