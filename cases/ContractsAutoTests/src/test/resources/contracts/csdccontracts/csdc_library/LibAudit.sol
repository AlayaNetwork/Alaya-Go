pragma solidity ^0.4.12;
/**
* @file LibAudit.sol
* @author yiyating
* @time 2016-12-28
* @desc 消息定义
*/


import "../utillib/LibInt.sol";
import "../utillib/LibString.sol";
import "../utillib/LibJson.sol";
import "../utillib/LibStack.sol";

library LibAudit {
    using LibInt for *;
    using LibString for *;
    using LibAudit for *;
    using LibJson for *;

    enum OperateCode { 
        NONE, 
        PASS,           //通过
        FAIL,           //拒绝
        WAITING,        //处理中
        GO_TO_LEADER    //送领导审批
    }

    /**
    * @dev Contruction
    */
    struct Audit {
        address auditorId;          //用户id
        uint auditorType;           //审核人类型
        string auditorName;         //审核人姓名
        string auditorPhone;        //审核人电话
        string auditName;           //审核环节名称
        string auditComment;        //审核意见，失败原因
        OperateCode operateCode;    //审核操作
        uint auditTime;             //审核业务类型
        uint oldStatus;             //老状态
        uint status;                //审核后的状态
        string statusDesc;          //状态描述
    }

    /**
    *@desc fromJson for Audit
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(Audit storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.auditorId = _json.jsonRead("auditorId").toAddress();
        _self.auditorType = _json.jsonRead("auditorType").toUint();
        _self.auditorName = _json.jsonRead("auditorName");
        _self.auditorPhone = _json.jsonRead("auditorPhone");
        _self.auditName = _json.jsonRead("auditName");
        _self.auditComment = _json.jsonRead("auditComment");
        _self.operateCode = OperateCode(_json.jsonRead("operateCode").toUint());
        _self.auditTime = _json.jsonRead("auditTime").toUint();
        _self.oldStatus = _json.jsonRead("oldStatus").toUint();
        _self.status = _json.jsonRead("status").toUint();
        _self.statusDesc = _json.jsonRead("statusDesc");

        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for Audit
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(Audit storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("auditorId", _self.auditorId);
        len = LibStack.appendKeyValue("auditorType", _self.auditorType);
        len = LibStack.appendKeyValue("auditorName", _self.auditorName);
        len = LibStack.appendKeyValue("auditorPhone", _self.auditorPhone);
        len = LibStack.appendKeyValue("auditName", _self.auditName);
        len = LibStack.appendKeyValue("auditComment", _self.auditComment);
        len = LibStack.appendKeyValue("operateCode", uint(_self.operateCode));
        len = LibStack.appendKeyValue("auditTime", _self.auditTime);
        len = LibStack.appendKeyValue("oldStatus", _self.oldStatus);
        len = LibStack.appendKeyValue("status", _self.status);
        len = LibStack.appendKeyValue("statusDesc", _self.statusDesc);
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc fromJsonArray for Audit
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJsonArray(Audit[] storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }
        _self.length = 0;

        if (!_json.isJson()){
            LibJson.pop();
            return false;
        }

        while (true) {
            string memory key = "[".concat(_self.length.toString(), "]");
            if (!_json.jsonKeyExists(key))
                break;

            _self.length++;
            _self[_self.length-1].fromJson(_json.jsonRead(key));
        }

        LibJson.pop();
        return true;
    }

    /**
    *@desc toJsonArray for Audit
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJsonArray(Audit[] storage _self) internal constant returns(string _json) {
        uint len = 0;
        len = LibStack.push("[");
        for (uint i=0; i<_self.length; ++i) {
            if (i > 0)
                len = LibStack.append(",");
            len = LibStack.append(_self[i].toJson());
        }
        len = LibStack.append("]");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for Audit
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(Audit storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("auditorId"))
            _self.auditorId = _json.jsonRead("auditorId").toAddress();
        if (_json.jsonKeyExists("auditorType"))
            _self.auditorType = _json.jsonRead("auditorType").toUint();
        if (_json.jsonKeyExists("auditorName"))
            _self.auditorName = _json.jsonRead("auditorName");
        if (_json.jsonKeyExists("auditorPhone"))
            _self.auditorPhone = _json.jsonRead("auditorPhone");
        if (_json.jsonKeyExists("auditName"))
            _self.auditName = _json.jsonRead("auditName");
        if (_json.jsonKeyExists("auditComment"))
            _self.auditComment = _json.jsonRead("auditComment");
        if (_json.jsonKeyExists("operateCode"))
            _self.operateCode = OperateCode(_json.jsonRead("operateCode").toUint());
        if (_json.jsonKeyExists("auditTime"))
            _self.auditTime = _json.jsonRead("auditTime").toUint();
        if (_json.jsonKeyExists("oldStatus"))
            _self.oldStatus = _json.jsonRead("oldStatus").toUint();
        if (_json.jsonKeyExists("status"))
            _self.status = _json.jsonRead("status").toUint();
        if (_json.jsonKeyExists("statusDesc"))
            _self.statusDesc = _json.jsonRead("statusDesc");

        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for Audit
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(Audit storage _self) internal {
        delete _self.auditorId;
        delete _self.auditorType;
        delete _self.auditorName;
        delete _self.auditorPhone;
        delete _self.auditName;
        delete _self.auditComment;
        delete _self.operateCode;
        delete _self.auditTime;
        delete _self.oldStatus;
        delete _self.status;
        delete _self.statusDesc;
    }

    function create(Audit storage _self, address _auditorId, uint _operateCode, string _auditComment, string _auditName) internal {
        _self.reset();
        _self.auditorId = _auditorId;
        _self.auditComment = _auditComment;
        _self.operateCode = OperateCode(_operateCode);
        _self.auditName = _auditName;
        _self.auditTime = now*1000;
    }
}
