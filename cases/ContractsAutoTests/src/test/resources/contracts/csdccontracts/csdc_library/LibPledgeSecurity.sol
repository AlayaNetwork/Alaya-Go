pragma solidity ^0.4.12;
/**
* @file LibPledgeSecurity.sol
* @author yiyating
* @time 2016-12-27
* @desc 质押证券定义
*/


import "../utillib/LibInt.sol";
import "../utillib/LibString.sol";
import "../utillib/LibJson.sol";
import "../utillib/LibStack.sol";

library LibPledgeSecurity {
    using LibInt for *;
    using LibString for *;
    using LibJson for *;
    using LibPledgeSecurity for *;

    //股份性质 0-无，1-普通股，2-优先股
    // enum SecType { NONE, COMMON_STOCK, PREFERRED_STOCK }

    enum IsProfit { NONE, T, F }
    /**
    * @dev Contruction
    */
    struct PledgeSecurity {
        uint id;            //id
        string secAccount;  //证券账户
        string secCode;     //证券代码
        string secName;     //证券简称
        string secType;   //证券类别（股份性质）
        string hostedUnit;  //托管单元
        string hostedUnitName;//证券单元名称
        string secProperty;//股份性质
        uint pledgeNum; //质押数量
        uint remainPledgeNum; //剩余质押数量
        IsProfit isProfit;      //是否解除红利
        IsProfit isProfitRemain;        //是否解除红利修改后
        uint profitAmount;  //现金红利金额
        uint bonusShareAmount; //剩余红股
        string uniAcctNbr; //一码通号
        string shareholderIdNo;     //股东证件号码
        string freezeNo;            //冻结序号
        string subFreezeNo;         //冻结子序号
        uint totalMarketAmount;     //市场总股本
        uint shareHoldingRatio;     //持股比例
        uint pledgeRatio;           //质押比例
        uint frozenFlag;            //冻结是否成功
        uint frozenNum;             //已冻结股数
        uint preFrozenNum;          //预冻结股数
        uint originalPledgeNum;     //原质押数量
        uint judiciaryFreezeNum;    //司法冻结股数
        uint isJudiciaryFrozen;     //是否已司法冻结
        uint doContinueWithJudiciaryFreeze;  //司法冻结情况下是否继续接触质押
        uint remainPositionNum;     //剩余持仓股数
    }

    /**
    *@desc fromJson for PledgeSecurity
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(PledgeSecurity storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.id = _json.jsonRead("id").toUint();
        _self.secAccount = _json.jsonRead("secAccount");
        _self.secCode = _json.jsonRead("secCode");
        _self.secName = _json.jsonRead("secName");
        _self.secType = _json.jsonRead("secType");
        _self.hostedUnit = _json.jsonRead("hostedUnit");
        _self.hostedUnitName = _json.jsonRead("hostedUnitName");
        _self.secProperty = _json.jsonRead("secProperty");
        _self.pledgeNum = _json.jsonRead("pledgeNum").toUint();
        _self.remainPledgeNum = _json.jsonRead("remainPledgeNum").toUint();
        _self.isProfit = IsProfit(_json.jsonRead("isProfit").toUint());
        _self.isProfitRemain = IsProfit(_json.jsonRead("isProfitRemain").toUint());
        _self.profitAmount = _json.jsonRead("profitAmount").toUint();
        _self.bonusShareAmount = _json.jsonRead("bonusShareAmount").toUint();
        _self.uniAcctNbr = _json.jsonRead("uniAcctNbr");
        _self.shareholderIdNo = _json.jsonRead("shareholderIdNo");
        _self.freezeNo = _json.jsonRead("freezeNo");
        _self.subFreezeNo = _json.jsonRead("subFreezeNo");
        _self.totalMarketAmount = _json.jsonRead("totalMarketAmount").toUint();
        _self.shareHoldingRatio = _json.jsonRead("shareHoldingRatio").toUint();
        _self.pledgeRatio = _json.jsonRead("pledgeRatio").toUint();
        _self.frozenFlag = _json.jsonRead("frozenFlag").toUint();
        _self.frozenNum = _json.jsonRead("frozenNum").toUint();
        _self.preFrozenNum = _json.jsonRead("preFrozenNum").toUint();
        _self.originalPledgeNum = _json.jsonRead("originalPledgeNum").toUint();
        _self.judiciaryFreezeNum = _json.jsonRead("judiciaryFreezeNum").toUint();
        _self.isJudiciaryFrozen = _json.jsonRead("isJudiciaryFrozen").toUint();
        _self.doContinueWithJudiciaryFreeze = _json.jsonRead("doContinueWithJudiciaryFreeze").toUint();
        _self.remainPositionNum = _json.jsonRead("remainPositionNum").toUint();
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for PledgeSecurity
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(PledgeSecurity storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("id", _self.id);
        len = LibStack.appendKeyValue("secAccount", _self.secAccount);
        len = LibStack.appendKeyValue("secCode", _self.secCode);
        len = LibStack.appendKeyValue("secName", _self.secName);
        len = LibStack.appendKeyValue("secType", _self.secType);
        len = LibStack.appendKeyValue("hostedUnit", _self.hostedUnit);
        len = LibStack.appendKeyValue("hostedUnitName", _self.hostedUnitName);
        len = LibStack.appendKeyValue("secProperty", _self.secProperty);
        len = LibStack.appendKeyValue("pledgeNum", _self.pledgeNum);
        len = LibStack.appendKeyValue("remainPledgeNum", _self.remainPledgeNum);
        len = LibStack.appendKeyValue("isProfit", uint(_self.isProfit));
        len = LibStack.appendKeyValue("isProfitRemain", uint(_self.isProfitRemain));
        len = LibStack.appendKeyValue("profitAmount", _self.profitAmount);
        len = LibStack.appendKeyValue("bonusShareAmount", _self.bonusShareAmount);
        len = LibStack.appendKeyValue("uniAcctNbr", _self.uniAcctNbr);
        len = LibStack.appendKeyValue("shareholderIdNo", _self.shareholderIdNo);
        len = LibStack.appendKeyValue("freezeNo", _self.freezeNo);
        len = LibStack.appendKeyValue("subFreezeNo", _self.subFreezeNo);
        len = LibStack.appendKeyValue("totalMarketAmount", _self.totalMarketAmount);
        len = LibStack.appendKeyValue("shareHoldingRatio", _self.shareHoldingRatio);
        len = LibStack.appendKeyValue("pledgeRatio", _self.pledgeRatio);
        len = LibStack.appendKeyValue("frozenFlag", _self.frozenFlag);
        len = LibStack.appendKeyValue("frozenNum", _self.frozenNum);
        len = LibStack.appendKeyValue("preFrozenNum", _self.preFrozenNum);
        len = LibStack.appendKeyValue("originalPledgeNum", _self.originalPledgeNum);
        len = LibStack.appendKeyValue("judiciaryFreezeNum", _self.judiciaryFreezeNum);
        len = LibStack.appendKeyValue("isJudiciaryFrozen", _self.isJudiciaryFrozen);
        len = LibStack.appendKeyValue("doContinueWithJudiciaryFreeze", _self.doContinueWithJudiciaryFreeze);
        len = LibStack.appendKeyValue("remainPositionNum", _self.remainPositionNum);
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc fromJsonArray for PledgeSecurity
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJsonArray(PledgeSecurity[] storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }
        _self.length = 0;

        if (!_json.isJson()){
            LibJson.pop();
            return false;
        }

        while (true) {
            string memory key = "[".concat(_self.length.toString(), "]");
            if (!_json.jsonKeyExists(key))
                break;

            _self.length++;
            _self[_self.length-1].fromJson(_json.jsonRead(key));
        }

        LibJson.pop();
        return true;
    }

    /**
    *@desc toJsonArray for PledgeSecurity
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJsonArray(PledgeSecurity[] storage _self) internal constant returns(string _json) {
        uint len = 0;
        len = LibStack.push("[");
        for (uint i=0; i<_self.length; ++i) {
            if (i > 0)
                len = LibStack.append(",");
            len = LibStack.append(_self[i].toJson());
        }
        len = LibStack.append("]");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for PledgeSecurity
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(PledgeSecurity storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("id"))
            _self.id = _json.jsonRead("id").toUint();
        if (_json.jsonKeyExists("secAccount"))
            _self.secAccount = _json.jsonRead("secAccount");
        if (_json.jsonKeyExists("secCode"))
            _self.secCode = _json.jsonRead("secCode");
        if (_json.jsonKeyExists("secName"))
            _self.secName = _json.jsonRead("secName");
        if (_json.jsonKeyExists("secType"))
            _self.secType = _json.jsonRead("secType");
        if (_json.jsonKeyExists("hostedUnit"))
            _self.hostedUnit = _json.jsonRead("hostedUnit");
        if (_json.jsonKeyExists("hostedUnitName"))
            _self.hostedUnitName = _json.jsonRead("hostedUnitName");
        if (_json.jsonKeyExists("secProperty"))
            _self.secProperty = _json.jsonRead("secProperty");
        if (_json.jsonKeyExists("pledgeNum"))
            _self.pledgeNum = _json.jsonRead("pledgeNum").toUint();
        if (_json.jsonKeyExists("remainPledgeNum"))
            _self.remainPledgeNum = _json.jsonRead("remainPledgeNum").toUint();
        if (_json.jsonKeyExists("isProfit"))
            _self.isProfit = IsProfit(_json.jsonRead("isProfit").toUint());
        if (_json.jsonKeyExists("isProfitRemain"))
            _self.isProfitRemain = IsProfit(_json.jsonRead("isProfitRemain").toUint());
        if (_json.jsonKeyExists("profitAmount"))
            _self.profitAmount = _json.jsonRead("profitAmount").toUint();
        if (_json.jsonKeyExists("bonusShareAmount"))
            _self.bonusShareAmount = _json.jsonRead("bonusShareAmount").toUint();
        if (_json.jsonKeyExists("uniAcctNbr"))
            _self.uniAcctNbr = _json.jsonRead("uniAcctNbr");
        if (_json.jsonKeyExists("shareholderIdNo"))
            _self.shareholderIdNo = _json.jsonRead("shareholderIdNo");
        if (_json.jsonKeyExists("freezeNo"))
            _self.freezeNo = _json.jsonRead("freezeNo");
        if (_json.jsonKeyExists("subFreezeNo"))
            _self.subFreezeNo = _json.jsonRead("subFreezeNo");
        if (_json.jsonKeyExists("totalMarketAmount"))
            _self.totalMarketAmount = _json.jsonRead("totalMarketAmount").toUint();
        if (_json.jsonKeyExists("shareHoldingRatio"))
            _self.shareHoldingRatio = _json.jsonRead("shareHoldingRatio").toUint();
        if (_json.jsonKeyExists("pledgeRatio"))
            _self.pledgeRatio = _json.jsonRead("pledgeRatio").toUint();
        if (_json.jsonKeyExists("frozenFlag"))
            _self.frozenFlag = _json.jsonRead("frozenFlag").toUint();
        if (_json.jsonKeyExists("frozenNum"))
            _self.frozenNum = _json.jsonRead("frozenNum").toUint();
        if (_json.jsonKeyExists("preFrozenNum"))
            _self.preFrozenNum = _json.jsonRead("preFrozenNum").toUint();
        if (_json.jsonKeyExists("originalPledgeNum"))
            _self.originalPledgeNum = _json.jsonRead("originalPledgeNum").toUint();
        if (_json.jsonKeyExists("judiciaryFreezeNum"))
            _self.judiciaryFreezeNum = _json.jsonRead("judiciaryFreezeNum").toUint();
        if (_json.jsonKeyExists("isJudiciaryFrozen"))
            _self.isJudiciaryFrozen = _json.jsonRead("isJudiciaryFrozen").toUint();
        if (_json.jsonKeyExists("doContinueWithJudiciaryFreeze"))
            _self.doContinueWithJudiciaryFreeze = _json.jsonRead("doContinueWithJudiciaryFreeze").toUint();
        if (_json.jsonKeyExists("remainPledgeNum"))
            _self.remainPledgeNum = _json.jsonRead("remainPledgeNum").toUint();


        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for PledgeSecurity
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(PledgeSecurity storage _self) internal {
        delete _self.id;
        delete _self.secAccount;
        delete _self.secCode;
        delete _self.secName;
        delete _self.secType;
        delete _self.hostedUnit;
        delete _self.hostedUnitName;
        delete _self.secProperty;
        delete _self.pledgeNum;
        delete _self.remainPledgeNum;
        delete _self.isProfit;
        delete _self.isProfitRemain;
        delete _self.profitAmount;
        delete _self.bonusShareAmount;
        delete _self.uniAcctNbr;
        delete _self.shareholderIdNo;
        delete _self.freezeNo;
        delete _self.subFreezeNo;
        delete _self.totalMarketAmount;
        delete _self.shareHoldingRatio;
        delete _self.pledgeRatio;
        delete _self.frozenFlag;
        delete _self.frozenNum;
        delete _self.preFrozenNum;
        delete _self.originalPledgeNum;
        delete _self.judiciaryFreezeNum;
        delete _self.isJudiciaryFrozen;
        delete _self.doContinueWithJudiciaryFreeze;
        delete _self.remainPositionNum;
    }
}