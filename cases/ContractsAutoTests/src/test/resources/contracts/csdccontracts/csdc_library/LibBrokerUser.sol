pragma solidity ^0.4.12;
/**
*@file      LibBrokerUser.sol
*@author    xuhui
*@time      2016-3-24
*@desc      the defination of LibBrokerUser
*/

import "../utillib/LibInt.sol";
import "../utillib/LibString.sol";
import "../utillib/LibJson.sol";
import "../utillib/LibStack.sol";

library LibBrokerUser {
    using LibInt for *;
    using LibString for *;
    using LibJson for *;
    using LibBrokerUser for *;

    /** @账户状态 : 空值 无效 有效 锁定 */
    enum AccountStatus { NONE,INVALID,VALID,LOCKED }

    enum Sex { NONE,MAN,WOMAN}

    enum Role {
        NONE,
        PLEDGE_OPERATOR,   //1-券商操作员
        PLEDGE_REVIEWER    //2-券商审核员
    }

    struct BrokerUser{
        address id;
        string loginName;
        string departmentName;
        string password;
        string name;
        uint8 age;
        Sex sex;
        uint birthday;
        string email;
        string mobile;
        string phone;
        string fax;
        uint brokerId;
        uint role;
        AccountStatus status;
    }

    /**
    *@desc fromJson for BrokerUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(BrokerUser storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.id = _json.jsonRead("id").toAddress();
        _self.loginName = _json.jsonRead("loginName");
        _self.departmentName = _json.jsonRead("departmentName");
        _self.password = _json.jsonRead("password");
        _self.name = _json.jsonRead("name");
        _self.age = uint8(_json.jsonRead("age").toUint());
        _self.sex = Sex(_json.jsonRead("sex").toUint());
        _self.birthday = _json.jsonRead("birthday").toUint();
        _self.email = _json.jsonRead("email");
        _self.mobile = _json.jsonRead("mobile");
        _self.phone = _json.jsonRead("phone");
        _self.fax = _json.jsonRead("fax");
        _self.brokerId = _json.jsonRead("brokerId").toUint();
        _self.role = _json.jsonRead("role").toUint();
        _self.status = AccountStatus(_json.jsonRead("status").toUint());

        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for BrokerUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(BrokerUser storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("id", _self.id);
        len = LibStack.appendKeyValue("loginName", _self.loginName);
        len = LibStack.appendKeyValue("departmentName", _self.departmentName);
        len = LibStack.appendKeyValue("password", _self.password);
        len = LibStack.appendKeyValue("name", _self.name);
        len = LibStack.appendKeyValue("age", uint(_self.age));
        len = LibStack.appendKeyValue("sex", uint(_self.sex));
        len = LibStack.appendKeyValue("birthday", _self.birthday);
        len = LibStack.appendKeyValue("email", _self.email);
        len = LibStack.appendKeyValue("mobile", _self.mobile);
        len = LibStack.appendKeyValue("phone", _self.phone);
        len = LibStack.appendKeyValue("fax", _self.fax);
        len = LibStack.appendKeyValue("brokerId", _self.brokerId);
        len = LibStack.appendKeyValue("role", _self.role);
        len = LibStack.appendKeyValue("status", uint(_self.status));
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for BrokerUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(BrokerUser storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("id"))
            _self.id = _json.jsonRead("id").toAddress();
        if (_json.jsonKeyExists("loginName"))
            _self.loginName = _json.jsonRead("loginName");
        if (_json.jsonKeyExists("departmentName"))
            _self.departmentName = _json.jsonRead("departmentName");
        if (_json.jsonKeyExists("password"))
            _self.password = _json.jsonRead("password");
        if (_json.jsonKeyExists("name"))
            _self.name = _json.jsonRead("name");
        if (_json.jsonKeyExists("age"))
            _self.age = uint8(_json.jsonRead("age").toUint());
        if (_json.jsonKeyExists("sex"))
            _self.sex = Sex(_json.jsonRead("sex").toUint());
        if (_json.jsonKeyExists("birthday"))
            _self.birthday = _json.jsonRead("birthday").toUint();
        if (_json.jsonKeyExists("email"))
            _self.email = _json.jsonRead("email");
        if (_json.jsonKeyExists("mobile"))
            _self.mobile = _json.jsonRead("mobile");
        if (_json.jsonKeyExists("phone"))
            _self.phone = _json.jsonRead("phone");
        if (_json.jsonKeyExists("fax"))
            _self.fax = _json.jsonRead("fax");
        if (_json.jsonKeyExists("brokerId"))
            _self.brokerId = _json.jsonRead("brokerId").toUint();
        if (_json.jsonKeyExists("role"))
            _self.role = _json.jsonRead("role").toUint();
        if (_json.jsonKeyExists("status"))
            _self.status = AccountStatus(_json.jsonRead("status").toUint());
            
        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for BrokerUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(BrokerUser storage _self) internal {
        delete _self.id;
        delete _self.loginName;
        delete _self.departmentName;
        delete _self.password;
        delete _self.name;
        delete _self.age;
        delete _self.sex;
        delete _self.birthday;
        delete _self.email;
        delete _self.mobile;
        delete _self.phone;
        delete _self.fax;
        delete _self.brokerId;
        delete _self.role;
        delete _self.status;
    }
}