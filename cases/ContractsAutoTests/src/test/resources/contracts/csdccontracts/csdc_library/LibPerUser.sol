pragma solidity ^0.4.12;
/**
*@file      LibPerUser.sol
*@author    xuhui
*@time      2016-3-2
*@desc      the defination of LibPerUser
*/

import "../utillib/LibInt.sol";
import "../utillib/LibString.sol";
import "../utillib/LibStack.sol";
import "../utillib/LibJson.sol";
import "./LibCommonEnum.sol";

library LibPerUser {
	using LibInt for *;
    using LibString for *;
    using LibPerUser for *;
    using LibJson for *;

    /** @认证状态 : 无效 初始化 有效 锁定 */
    enum PerUserStatus { 
        NONE,
        INVALID,
        INITIAL,
        VALID,
        LOCKED
    }

    struct PerUser{
        address id;
        string name; //姓名
        string loginName; //登录名
        LibCommonEnum.IdType idType;
        string idNo; 
        uint idValidity;
        string mobile;
        string phone;
        string addr;
        string email;
        string postCode;
        PerUserStatus status;
    }

    /**
    *@desc fromJson for PerUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(PerUser storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.id = _json.jsonRead("id").toAddress();
        _self.name = _json.jsonRead("name");
        _self.loginName = _json.jsonRead("loginName");
        _self.idType = LibCommonEnum.IdType(_json.jsonRead("idType").toUint());
        _self.idNo = _json.jsonRead("idNo");
        _self.idValidity = _json.jsonRead("idValidity").toUint();
        _self.mobile = _json.jsonRead("mobile");
        _self.phone = _json.jsonRead("phone");
        _self.addr = _json.jsonRead("addr");
        _self.email = _json.jsonRead("email");
        _self.postCode = _json.jsonRead("postCode");
        _self.status = PerUserStatus(_json.jsonRead("status").toUint());
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for PerUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(PerUser storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("id", _self.id);
        len = LibStack.appendKeyValue("name", _self.name);
        len = LibStack.appendKeyValue("loginName", _self.loginName);
        len = LibStack.appendKeyValue("idType", uint(_self.idType));
        len = LibStack.appendKeyValue("idNo", _self.idNo);
        len = LibStack.appendKeyValue("idValidity", _self.idValidity);
        len = LibStack.appendKeyValue("mobile", _self.mobile);
        len = LibStack.appendKeyValue("phone", _self.phone);
        len = LibStack.appendKeyValue("addr", _self.addr);
        len = LibStack.appendKeyValue("email", _self.email);
        len = LibStack.appendKeyValue("postCode", _self.postCode);
        len = LibStack.appendKeyValue("status", uint(_self.status));
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for PerUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(PerUser storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("id"))
            _self.id = _json.jsonRead("id").toAddress();
        if (_json.jsonKeyExists("name"))
            _self.name = _json.jsonRead("name");
        if (_json.jsonKeyExists("loginName"))
            _self.loginName = _json.jsonRead("loginName");
        if (_json.jsonKeyExists("idType"))
            _self.idType = LibCommonEnum.IdType(_json.jsonRead("idType").toUint());
        if (_json.jsonKeyExists("idNo"))
            _self.idNo = _json.jsonRead("idNo");
        if (_json.jsonKeyExists("idValidity"))
            _self.idValidity = _json.jsonRead("idValidity").toUint();
        if (_json.jsonKeyExists("mobile"))
            _self.mobile = _json.jsonRead("mobile");
        if (_json.jsonKeyExists("phone"))
            _self.phone = _json.jsonRead("phone");
        if (_json.jsonKeyExists("addr"))
            _self.addr = _json.jsonRead("addr");
        if (_json.jsonKeyExists("email"))
            _self.email = _json.jsonRead("email");
        if (_json.jsonKeyExists("postCode"))
            _self.postCode = _json.jsonRead("postCode");
        if (_json.jsonKeyExists("status"))
            _self.status = PerUserStatus(_json.jsonRead("status").toUint());
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for PerUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(PerUser storage _self) internal {
        delete _self.id;
        delete _self.name;
        delete _self.loginName;
        // _self.idType.reset();
        delete _self.idType;
        delete _self.idNo;
        delete _self.idValidity;
        delete _self.mobile;
        delete _self.phone;
        delete _self.addr;
        delete _self.email;
        delete _self.postCode;
        delete _self.status;
    }
}