pragma solidity ^0.4.12;
/**
* @file LibSecPledge.sol
* @author yiyating
* @time 2016-12-27
* @desc 证券质押定义
*/


import "./LibPledgeSecurity.sol";
import "./LibTradeUser.sol";
import "./LibTradeOperator.sol";

library LibSecPledge{
    using LibJson for *;
    using LibString for *;
    using LibInt for *;
    using LibPledgeSecurity for *;
    using LibTradeUser for *;
    using LibTradeOperator for *;
    using LibSecPledge for *;

    enum PledgeStatus {
        NONE,
        PLEDGING,           //1-质押中
        DISPLEGING,          //2-解除处理中
        PARTIAL_PLEDGED,    //3-部分质押中
        ALL_PLEDGED         //4-完全解除
    }

    enum IsOnline {
        NONE,
        YES,            
        NOT 
    }

    enum IsEvidenceMailed {
        NONE,
        YES,            
        NOT 
    }

    enum IsEvidenceApplied{
        NONE,
        YES,
        NOT
    }

    struct SecPledge{
        uint id;                        //id
        address pledgorId;    //出质人地址
        string pledgorName;   //出质人姓名
        address pledgeeId;    //质权人地址
        string pledgeeName;    //质权人姓名              
        address managerId;              //经办人id

        LibTradeUser.TradeUser[]        pledgors;       //出质人
        LibTradeUser.TradeUser          pledgee;        //质权人   
        LibTradeOperator.TradeOperator  tradeOperator;  //经办人

        string pledgeRegisterNo;        //质押登记编号
        string pledgeRegisterFileId;            //登记证明文件id
        string pledgeRegisterFileName;          //登记证明文件名称
        uint applyTime;                 //质押申请时间
        uint pledgeTime;                //质押成功时间
        uint isOnline;                  //是否在线办理
        uint secPledgeApplyId;                  //申请单号外键
        uint isEvidenceMailed;                    //是否已邮寄
        uint isEvidenceApplied;         //证明文件是否已申请
        string businessNo;              //业务单号
        PledgeStatus status;            //质押状态
        PledgeStatus statusShow;        //上一次状态记录，供回退时使用
        string partialPledgeRegisterNo; //  (部分解除)质押登记编号        s   AS400冻结后返回
        string partialPledgeRegisterFileId; //  (部分解除)质押登记证明文件id        s   
        string partialPledgeRegisterFileName; //    (部分解除)质押登记证明文件名称        s   

        LibPledgeSecurity.PledgeSecurity[] appliedSecurities;   //质押证券
        //LibPledgeSecurity.PledgeSecurity[] remainAppliedSecurities;   //剩余质押证券
        uint[] disSecPedgeApplyIds; //解除质押申请id数组

        uint evidenceId;              //证明文件id;
        uint invoiceId;               //邮寄发票id;
        int financingAmount;        //申请融资金额
        int financingAmountRemain; //剩余融资金额

        uint frozenFlag; //冻结成功标志 1：成功 2：部分成功
    }

    /**
    *@desc fromJson for SecPledge
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(SecPledge storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.id = _json.jsonRead("id").toUint();
        _self.pledgorId = _json.jsonRead("pledgorId").toAddress();
        _self.pledgorName = _json.jsonRead("pledgorName");
        _self.pledgeeId = _json.jsonRead("pledgeeId").toAddress();
        _self.pledgeeName = _json.jsonRead("pledgeeName");
        _self.managerId = _json.jsonRead("managerId").toAddress();
        _self.pledgors.fromJsonArray(_json.jsonRead("pledgors"));
        _self.pledgee.fromJson(_json.jsonRead("pledgee"));
        _self.tradeOperator.fromJson(_json.jsonRead("tradeOperator"));
        _self.pledgeRegisterNo = _json.jsonRead("pledgeRegisterNo");
        _self.pledgeRegisterFileId = _json.jsonRead("pledgeRegisterFileId");
        _self.pledgeRegisterFileName = _json.jsonRead("pledgeRegisterFileName");
        _self.applyTime = _json.jsonRead("applyTime").toUint();
        _self.pledgeTime = _json.jsonRead("pledgeTime").toUint();
        _self.isOnline = _json.jsonRead("isOnline").toUint();
        _self.secPledgeApplyId = _json.jsonRead("secPledgeApplyId").toUint();
        _self.isEvidenceMailed = _json.jsonRead("isEvidenceMailed").toUint();
        _self.isEvidenceApplied = _json.jsonRead("isEvidenceApplied").toUint();
        _self.businessNo = _json.jsonRead("businessNo");
        _self.status = PledgeStatus(_json.jsonRead("status").toUint());
        _self.statusShow = PledgeStatus(_json.jsonRead("statusShow").toUint());
        _self.partialPledgeRegisterNo = _json.jsonRead("partialPledgeRegisterNo");
        _self.partialPledgeRegisterFileId = _json.jsonRead("partialPledgeRegisterFileId");
        _self.partialPledgeRegisterFileName = _json.jsonRead("partialPledgeRegisterFileName");
        _self.appliedSecurities.fromJsonArray(_json.jsonRead("appliedSecurities"));
        _self.disSecPedgeApplyIds.fromJsonArray(_json.jsonRead("disSecPedgeApplyIds"));
        _self.evidenceId = _json.jsonRead("evidenceId").toUint();
        _self.invoiceId = _json.jsonRead("invoiceId").toUint();
        _self.financingAmount = _json.jsonRead("financingAmount").toInt();
        _self.financingAmountRemain = _json.jsonRead("financingAmountRemain").toInt();
        _self.frozenFlag = _json.jsonRead("frozenFlag").toUint();
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for SecPledge
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(SecPledge storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("id", _self.id);
        len = LibStack.appendKeyValue("pledgorId", _self.pledgorId);
        len = LibStack.appendKeyValue("pledgorName", _self.pledgorName);
        len = LibStack.appendKeyValue("pledgeeId", _self.pledgeeId);
        len = LibStack.appendKeyValue("pledgeeName", _self.pledgeeName);
        len = LibStack.appendKeyValue("managerId", _self.managerId);
        len = LibStack.appendKeyValue("pledgors", _self.pledgors.toJsonArray());
        len = LibStack.appendKeyValue("pledgee", _self.pledgee.toJson());
        len = LibStack.appendKeyValue("tradeOperator", _self.tradeOperator.toJson());
        len = LibStack.appendKeyValue("pledgeRegisterNo", _self.pledgeRegisterNo);
        len = LibStack.appendKeyValue("pledgeRegisterFileId", _self.pledgeRegisterFileId);
        len = LibStack.appendKeyValue("pledgeRegisterFileName", _self.pledgeRegisterFileName);
        len = LibStack.appendKeyValue("applyTime", _self.applyTime);
        len = LibStack.appendKeyValue("pledgeTime", _self.pledgeTime);
        len = LibStack.appendKeyValue("isOnline", _self.isOnline);
        len = LibStack.appendKeyValue("secPledgeApplyId", _self.secPledgeApplyId);
        len = LibStack.appendKeyValue("isEvidenceMailed", _self.isEvidenceMailed);
        len = LibStack.appendKeyValue("isEvidenceApplied", _self.isEvidenceApplied);
        len = LibStack.appendKeyValue("businessNo", _self.businessNo);
        len = LibStack.appendKeyValue("status", uint(_self.status));
        len = LibStack.appendKeyValue("statusShow", uint(_self.statusShow));
        len = LibStack.appendKeyValue("partialPledgeRegisterNo", _self.partialPledgeRegisterNo);
        len = LibStack.appendKeyValue("partialPledgeRegisterFileId", _self.partialPledgeRegisterFileId);
        len = LibStack.appendKeyValue("partialPledgeRegisterFileName", _self.partialPledgeRegisterFileName);
        len = LibStack.appendKeyValue("appliedSecurities", _self.appliedSecurities.toJsonArray());
        len = LibStack.appendKeyValue("disSecPedgeApplyIds", _self.disSecPedgeApplyIds.toJsonArray());
        len = LibStack.appendKeyValue("evidenceId", _self.evidenceId);
        len = LibStack.appendKeyValue("invoiceId", _self.invoiceId);
        len = LibStack.appendKeyValue("financingAmount", _self.financingAmount);
        len = LibStack.appendKeyValue("financingAmountRemain", _self.financingAmountRemain);
        len = LibStack.appendKeyValue("frozenFlag", _self.frozenFlag);
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for SecPledge
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(SecPledge storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("id"))
            _self.id = _json.jsonRead("id").toUint();
        if (_json.jsonKeyExists("pledgorId"))
            _self.pledgorId = _json.jsonRead("pledgorId").toAddress();
        if (_json.jsonKeyExists("pledgorName"))
            _self.pledgorName = _json.jsonRead("pledgorName");
        if (_json.jsonKeyExists("pledgeeId"))
            _self.pledgeeId = _json.jsonRead("pledgeeId").toAddress();
        if (_json.jsonKeyExists("pledgeeName"))
            _self.pledgeeName = _json.jsonRead("pledgeeName");
        if (_json.jsonKeyExists("managerId"))
            _self.managerId = _json.jsonRead("managerId").toAddress();
        if (_json.jsonKeyExists("pledgors"))
            _self.pledgors.fromJsonArray(_json.jsonRead("pledgors"));
        if (_json.jsonKeyExists("pledgee"))
            _self.pledgee.fromJson(_json.jsonRead("pledgee"));
        if (_json.jsonKeyExists("tradeOperator"))
            _self.tradeOperator.fromJson(_json.jsonRead("tradeOperator"));
        if (_json.jsonKeyExists("pledgeRegisterNo"))
            _self.pledgeRegisterNo = _json.jsonRead("pledgeRegisterNo");
        if (_json.jsonKeyExists("pledgeRegisterFileId"))
            _self.pledgeRegisterFileId = _json.jsonRead("pledgeRegisterFileId");
        if (_json.jsonKeyExists("pledgeRegisterFileName"))
            _self.pledgeRegisterFileName = _json.jsonRead("pledgeRegisterFileName");
        if (_json.jsonKeyExists("applyTime"))
            _self.applyTime = _json.jsonRead("applyTime").toUint();
        if (_json.jsonKeyExists("pledgeTime"))
            _self.pledgeTime = _json.jsonRead("pledgeTime").toUint();
        if (_json.jsonKeyExists("isOnline"))
            _self.isOnline = _json.jsonRead("isOnline").toUint();
        if (_json.jsonKeyExists("secPledgeApplyId"))
            _self.secPledgeApplyId = _json.jsonRead("secPledgeApplyId").toUint();
        if (_json.jsonKeyExists("isEvidenceMailed"))
            _self.isEvidenceMailed = _json.jsonRead("isEvidenceMailed").toUint();
        if (_json.jsonKeyExists("isEvidenceApplied"))
            _self.isEvidenceApplied = _json.jsonRead("isEvidenceApplied").toUint();
        if (_json.jsonKeyExists("businessNo"))
            _self.businessNo = _json.jsonRead("businessNo");
        if (_json.jsonKeyExists("status"))
            _self.status = PledgeStatus(_json.jsonRead("status").toUint());
        if (_json.jsonKeyExists("statusShow"))
            _self.statusShow = PledgeStatus(_json.jsonRead("statusShow").toUint());
        if (_json.jsonKeyExists("partialPledgeRegisterNo"))
            _self.partialPledgeRegisterNo = _json.jsonRead("partialPledgeRegisterNo");
        if (_json.jsonKeyExists("partialPledgeRegisterFileId"))
            _self.partialPledgeRegisterFileId = _json.jsonRead("partialPledgeRegisterFileId");
        if (_json.jsonKeyExists("partialPledgeRegisterFileName"))
            _self.partialPledgeRegisterFileName = _json.jsonRead("partialPledgeRegisterFileName");
        if (_json.jsonKeyExists("appliedSecurities"))
            _self.appliedSecurities.fromJsonArray(_json.jsonRead("appliedSecurities"));
        if (_json.jsonKeyExists("disSecPedgeApplyIds"))
            _self.disSecPedgeApplyIds.fromJsonArray(_json.jsonRead("disSecPedgeApplyIds"));
        if (_json.jsonKeyExists("evidenceId"))
            _self.evidenceId = _json.jsonRead("evidenceId").toUint();
        if (_json.jsonKeyExists("invoiceId"))
            _self.invoiceId = _json.jsonRead("invoiceId").toUint();
        if (_json.jsonKeyExists("financingAmount"))
            _self.financingAmount = _json.jsonRead("financingAmount").toInt();
        if (_json.jsonKeyExists("financingAmountRemain"))
            _self.financingAmountRemain = _json.jsonRead("financingAmountRemain").toInt();
        if (_json.jsonKeyExists("frozenFlag"))
            _self.frozenFlag = _json.jsonRead("frozenFlag").toUint();
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for SecPledge
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(SecPledge storage _self) internal {
        delete _self.id;
        delete _self.pledgorId;
        delete _self.pledgorName;
        delete _self.pledgeeId;
        delete _self.pledgeeName;
        delete _self.managerId;
        _self.pledgors.length = 0;
        _self.pledgee.reset();
        _self.tradeOperator.reset();
        delete _self.pledgeRegisterNo;
        delete _self.pledgeRegisterFileId;
        delete _self.pledgeRegisterFileName;
        delete _self.applyTime;
        delete _self.pledgeTime;
        delete _self.isOnline;
        delete _self.secPledgeApplyId;
        delete _self.isEvidenceMailed;
        delete _self.isEvidenceApplied;
        delete _self.businessNo;
        delete _self.status;
        delete _self.statusShow;
        delete _self.partialPledgeRegisterNo;
        delete _self.partialPledgeRegisterFileId;
        delete _self.partialPledgeRegisterFileName;
        _self.appliedSecurities.length = 0;
        _self.disSecPedgeApplyIds.length = 0;
        delete _self.evidenceId;
        delete _self.invoiceId;
        delete _self.financingAmount;
        delete _self.financingAmountRemain;
        delete _self.frozenFlag;
    }
}