pragma solidity ^0.4.12;
/**
* @file LibPayment.sol
* @author yiyating
* @time 2016-12-27
* @desc 缴费定义
*/

import "./LibAudit.sol";
import "./LibRejectHistory.sol";


library LibPayment{
    using LibInt for *;
    using LibString for *;
    using LibJson for *;
    using LibPayment for *;
    using LibAudit for *;
    using LibRejectHistory for *;

    /* 缴费状态 */
    enum PaymentStatus { 
        NONE,
        UNPAID,     //1-未付款 
        PAID,       //2-已付款
        REFUNDED,     //3-已退款
        TIMEOUT     //4-超时
    }

    /* 缴费方式 */
    enum PaymentType { 
        NONE, 
        VISA,           //1-银联支付
        WEIXIN,         //2-微信支付
        ZHIFUBAO,       //3-支付宝支付
        TRANSFER,       //4-转账支付
        POS             //5-POS机支付
    }

    /* 退款申请状态 */
    enum RefundApplyStatus {
        NONE,
        UNAPPLIED,      //1-未申请
        UNAUDITED,      //2-待退款初审
        UNREVIEWED,     //3-待退款复核
        UNCONFIRMED,    //4-待确认退款
        REFUNDED,       //5-已退款
        AUDIT_FAILED,   //6-初审驳回
        REVIEW_FAILED   //7-复审驳回
    }

    struct Payment{
        uint id;                //id
        string flow;            //交易流水
        string payChannel;      //付费渠道
        uint time;              //交易时间
        uint amount;            //应收金额
        uint status;   //交易状态
        uint paymentType;//缴费方式
        string account;         //缴费账号
        uint relatedId;         //合约申请表示

        uint receivedAmount;    //实收金额
        uint refundApplyTime;   //退款申请日期
        uint updateTime;        //处理日期
        uint refundApplyStatus; //退款申请状态
        string refundApplyReason;   //退款申请原因
        LibAudit.Audit[] audits;    //退款审核信息
        LibRejectHistory.RejectHistory[] rejectHistory; //申请拒绝记录
    }

    /**
    *@desc fromJson for Payment
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(Payment storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.id = _json.jsonRead("id").toUint();
        _self.flow = _json.jsonRead("flow");
        _self.payChannel = _json.jsonRead("payChannel");
        _self.time = _json.jsonRead("time").toUint();
        _self.amount = _json.jsonRead("amount").toUint();
        _self.status = _json.jsonRead("status").toUint();
        _self.paymentType = _json.jsonRead("paymentType").toUint();
        _self.account = _json.jsonRead("account");
        _self.relatedId = _json.jsonRead("relatedId").toUint();
        _self.receivedAmount = _json.jsonRead("receivedAmount").toUint();
        _self.refundApplyTime = _json.jsonRead("refundApplyTime").toUint();
        _self.updateTime = _json.jsonRead("updateTime").toUint();
        _self.refundApplyStatus = _json.jsonRead("refundApplyStatus").toUint();
        _self.refundApplyReason = _json.jsonRead("refundApplyReason");
        _self.audits.fromJsonArray(_json.jsonRead("audits"));
        _self.rejectHistory.fromJsonArray(_json.jsonRead("rejectHistory"));
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for Payment
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(Payment storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("id", _self.id);
        len = LibStack.appendKeyValue("flow", _self.flow);
        len = LibStack.appendKeyValue("payChannel", _self.payChannel);
        len = LibStack.appendKeyValue("time", _self.time);
        len = LibStack.appendKeyValue("amount", _self.amount);
        len = LibStack.appendKeyValue("status", _self.status);
        len = LibStack.appendKeyValue("paymentType", _self.paymentType);
        len = LibStack.appendKeyValue("account", _self.account);
        len = LibStack.appendKeyValue("relatedId", _self.relatedId);
        len = LibStack.appendKeyValue("receivedAmount", _self.receivedAmount);
        len = LibStack.appendKeyValue("refundApplyTime", _self.refundApplyTime);
        len = LibStack.appendKeyValue("updateTime", _self.updateTime);
        len = LibStack.appendKeyValue("refundApplyStatus", _self.refundApplyStatus);
        len = LibStack.appendKeyValue("refundApplyReason", _self.refundApplyReason);
        len = LibStack.appendKeyValue("audits", _self.audits.toJsonArray());
        len = LibStack.appendKeyValue("rejectHistory", _self.rejectHistory.toJsonArray());
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }
    
    /**
    *@desc update for Payment
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(Payment storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("id"))
            _self.id = _json.jsonRead("id").toUint();
        if (_json.jsonKeyExists("flow"))
            _self.flow = _json.jsonRead("flow");
        if (_json.jsonKeyExists("payChannel"))
            _self.payChannel = _json.jsonRead("payChannel");
        if (_json.jsonKeyExists("time"))
            _self.time = _json.jsonRead("time").toUint();
        if (_json.jsonKeyExists("amount"))
            _self.amount = _json.jsonRead("amount").toUint();
        if (_json.jsonKeyExists("status"))
            _self.status = _json.jsonRead("status").toUint();
        if (_json.jsonKeyExists("paymentType"))
            _self.paymentType = _json.jsonRead("paymentType").toUint();
        if (_json.jsonKeyExists("account"))
            _self.account = _json.jsonRead("account");
        if (_json.jsonKeyExists("relatedId"))
            _self.relatedId = _json.jsonRead("relatedId").toUint();
        if (_json.jsonKeyExists("receivedAmount"))
            _self.receivedAmount = _json.jsonRead("receivedAmount").toUint();
        if (_json.jsonKeyExists("refundApplyTime"))
            _self.refundApplyTime = _json.jsonRead("refundApplyTime").toUint();
        if (_json.jsonKeyExists("updateTime"))
            _self.updateTime = _json.jsonRead("updateTime").toUint();
        if (_json.jsonKeyExists("refundApplyStatus"))
            _self.refundApplyStatus = _json.jsonRead("refundApplyStatus").toUint();
        if (_json.jsonKeyExists("refundApplyReason"))
            _self.refundApplyReason = _json.jsonRead("refundApplyReason");
        if (_json.jsonKeyExists("audits"))
            _self.audits.fromJsonArray(_json.jsonRead("audits"));
        if (_json.jsonKeyExists("rejectHistory"))
            _self.rejectHistory.fromJsonArray(_json.jsonRead("rejectHistory"));
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for Payment
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(Payment storage _self) internal {
        delete _self.id;
        delete _self.flow;
        delete _self.payChannel;
        delete _self.time;
        delete _self.amount;
        delete _self.status;
        delete _self.paymentType;
        delete _self.account;
        delete _self.relatedId;
        delete _self.receivedAmount;
        delete _self.refundApplyTime;
        delete _self.updateTime;
        delete _self.refundApplyStatus;
        delete _self.refundApplyReason;
        _self.audits.length = 0;
        _self.rejectHistory.length = 0;
    }

}