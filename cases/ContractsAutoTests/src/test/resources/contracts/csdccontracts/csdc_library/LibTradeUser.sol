pragma solidity ^0.4.12;
/**
*@file      LibTradeUser.sol
*@author    yiyating
*@time      2017-07-03
*@desc      the defination of LibTradeUser
*/

import "./LibAttachInfo.sol";
import "../utillib/LibLog.sol";

library LibTradeUser {
    using LibInt for *;
    using LibString for *;
    using LibTradeUser for *;
    using LibAttachInfo for *;
    using LibJson for *;

    enum TraderType {
        NONE,
        PERUSER,    //1-个人
        ORGUSER,    //2-机构
        BY_BROKER,  //3-券商录入
        BY_CSDC     //4-柜台录入
    }

    struct TradeUser {
        uint        traderType;     //交易者类型
        address     traderId;       //交易者address
        string      account;        //证券账户号
        string      accountType;    //证券账户类型
        uint        idType;         //身份证件类型
        string      idNo;           //身份证件号/注册号码
        uint        userType;       //用户类型
        string      name;           //姓名
        uint        isShareholder;  //是否国有股东
        uint        isSecAccount;   //是否定向资管专用证券账户
        uint        isFundAccount;  //是否基金账户
        uint        isAgency;       //是否代办
        string      agentName;      //代办人姓名
        string      agentMobile;    //代办人移动电话
        string      email;          //Email 
        string      receiverName;   //收件人姓名
        string      receiverMobile; //收件人联系方式
        string      postCode;       //邮政编码
        string      postAddr;       //邮政地址
        string      receiverCompany;//收件人单位名称
        uint        postType;       //邮寄方式
        string      expressCompany; //快递公司名称
        LibAttachInfo.AttachInfo[]  attachments;    //附件

        uint        isPost;         //是否邮寄
    }

    /**
    *@desc fromJson for TradeUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(TradeUser storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.traderType = _json.jsonRead("traderType").toUint();
        _self.traderId = _json.jsonRead("traderId").toAddress();
        _self.account = _json.jsonRead("account");
        _self.accountType = _json.jsonRead("accountType");
        _self.idType = _json.jsonRead("idType").toUint();
        _self.idNo = _json.jsonRead("idNo");
        _self.userType = _json.jsonRead("userType").toUint();
        _self.name = _json.jsonRead("name");
        _self.isShareholder = _json.jsonRead("isShareholder").toUint();
        _self.isSecAccount = _json.jsonRead("isSecAccount").toUint();
        _self.isFundAccount = _json.jsonRead("isFundAccount").toUint();
        _self.isAgency = _json.jsonRead("isAgency").toUint();
        _self.agentName = _json.jsonRead("agentName");
        _self.agentMobile = _json.jsonRead("agentMobile");
        _self.email = _json.jsonRead("email");
        _self.receiverName = _json.jsonRead("receiverName");
        _self.receiverMobile = _json.jsonRead("receiverMobile");
        _self.postCode = _json.jsonRead("postCode");
        _self.postAddr = _json.jsonRead("postAddr");
        _self.receiverCompany = _json.jsonRead("receiverCompany");
        _self.postType = _json.jsonRead("postType").toUint();
        _self.expressCompany = _json.jsonRead("expressCompany");
        _self.attachments.fromJsonArray(_json.jsonRead("attachments"));
        _self.isPost = _json.jsonRead("isPost").toUint();
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for TradeUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(TradeUser storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("traderType", _self.traderType);
        len = LibStack.appendKeyValue("traderId", _self.traderId);
        len = LibStack.appendKeyValue("account", _self.account);
        len = LibStack.appendKeyValue("accountType", _self.accountType);
        len = LibStack.appendKeyValue("idType", _self.idType);
        len = LibStack.appendKeyValue("idNo", _self.idNo);
        len = LibStack.appendKeyValue("userType", _self.userType);
        len = LibStack.appendKeyValue("name", _self.name);
        len = LibStack.appendKeyValue("isShareholder", _self.isShareholder);
        len = LibStack.appendKeyValue("isSecAccount", _self.isSecAccount);
        len = LibStack.appendKeyValue("isFundAccount", _self.isFundAccount);
        len = LibStack.appendKeyValue("isAgency", _self.isAgency);
        len = LibStack.appendKeyValue("agentName", _self.agentName);
        len = LibStack.appendKeyValue("agentMobile", _self.agentMobile);
        len = LibStack.appendKeyValue("email", _self.email);
        len = LibStack.appendKeyValue("receiverName", _self.receiverName);
        len = LibStack.appendKeyValue("receiverMobile", _self.receiverMobile);
        len = LibStack.appendKeyValue("postCode", _self.postCode);
        len = LibStack.appendKeyValue("postAddr", _self.postAddr);
        len = LibStack.appendKeyValue("receiverCompany", _self.receiverCompany);
        len = LibStack.appendKeyValue("postType", _self.postType);
        len = LibStack.appendKeyValue("expressCompany", _self.expressCompany);
        len = LibStack.appendKeyValue("attachments", _self.attachments.toJsonArray());
        len = LibStack.appendKeyValue("isPost", _self.isPost);
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc fromJsonArray for TradeUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJsonArray(TradeUser[] storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }
        _self.length = 0;

        if (!_json.isJson()){
            LibJson.pop();
            return false;
        }

        while (true) {
            string memory key = "[".concat(_self.length.toString(), "]");
            if (!_json.jsonKeyExists(key))
                break;

            _self.length++;
            _self[_self.length-1].fromJson(_json.jsonRead(key));
        }

        LibJson.pop();
        return true;
    }

    /**
    *@desc toJsonArray for TradeUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJsonArray(TradeUser[] storage _self) internal constant returns(string _json) {
        uint len = 0;
        len = LibStack.push("[");
        for (uint i=0; i<_self.length; ++i) {
            if (i > 0)
                len = LibStack.append(",");
            len = LibStack.append(_self[i].toJson());
        }
        len = LibStack.append("]");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for TradeUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(TradeUser storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("traderType"))
            _self.traderType = _json.jsonRead("traderType").toUint();
        if (_json.jsonKeyExists("traderId"))
            _self.traderId = _json.jsonRead("traderId").toAddress();
        if (_json.jsonKeyExists("account"))
            _self.account = _json.jsonRead("account");
        if (_json.jsonKeyExists("accountType"))
            _self.accountType = _json.jsonRead("accountType");
        if (_json.jsonKeyExists("idType"))
            _self.idType = _json.jsonRead("idType").toUint();
        if (_json.jsonKeyExists("idNo"))
            _self.idNo = _json.jsonRead("idNo");
        if (_json.jsonKeyExists("userType"))
            _self.userType = _json.jsonRead("userType").toUint();
        if (_json.jsonKeyExists("name"))
            _self.name = _json.jsonRead("name");
        if (_json.jsonKeyExists("isShareholder"))
            _self.isShareholder = _json.jsonRead("isShareholder").toUint();
        if (_json.jsonKeyExists("isSecAccount"))
            _self.isSecAccount = _json.jsonRead("isSecAccount").toUint();
        if (_json.jsonKeyExists("isFundAccount"))
            _self.isFundAccount = _json.jsonRead("isFundAccount").toUint();
        if (_json.jsonKeyExists("isAgency"))
            _self.isAgency = _json.jsonRead("isAgency").toUint();
        if (_json.jsonKeyExists("agentName"))
            _self.agentName = _json.jsonRead("agentName");
        if (_json.jsonKeyExists("agentMobile"))
            _self.agentMobile = _json.jsonRead("agentMobile");
        if (_json.jsonKeyExists("email"))
            _self.email = _json.jsonRead("email");
        if (_json.jsonKeyExists("receiverName"))
            _self.receiverName = _json.jsonRead("receiverName");
        if (_json.jsonKeyExists("receiverMobile"))
            _self.receiverMobile = _json.jsonRead("receiverMobile");
        if (_json.jsonKeyExists("postCode"))
            _self.postCode = _json.jsonRead("postCode");
        if (_json.jsonKeyExists("postAddr"))
            _self.postAddr = _json.jsonRead("postAddr");
        if (_json.jsonKeyExists("receiverCompany"))
            _self.receiverCompany = _json.jsonRead("receiverCompany");
        if (_json.jsonKeyExists("postType"))
            _self.postType = _json.jsonRead("postType").toUint();
        if (_json.jsonKeyExists("expressCompany"))
            _self.expressCompany = _json.jsonRead("expressCompany");
        if (_json.jsonKeyExists("attachments"))
            _self.attachments.fromJsonArray(_json.jsonRead("attachments"));
        if (_json.jsonKeyExists("isPost"))
            _self.isPost = _json.jsonRead("isPost").toUint();

        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for TradeUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(TradeUser storage _self) internal {
        delete _self.traderType;
        delete _self.traderId;
        delete _self.account;
        delete _self.accountType;
        delete _self.idType;
        delete _self.idNo;
        delete _self.userType;
        delete _self.name;
        delete _self.isShareholder;
        delete _self.isSecAccount;
        delete _self.isFundAccount;
        delete _self.isAgency;
        delete _self.agentName;
        delete _self.agentMobile;
        delete _self.email;
        delete _self.receiverName;
        delete _self.receiverMobile;
        delete _self.postCode;
        delete _self.postAddr;
        delete _self.receiverCompany;
        delete _self.postType;
        delete _self.expressCompany;
        _self.attachments.length = 0;
        delete _self.isPost;
    }
}