pragma solidity ^0.4.12;

/**
*@file      LibOrgUser.sol
*@author    xuhui
*@time      2016-3-2
*@desc      the defination of LibOrgUser
*/

import "../utillib/LibInt.sol";
import "../utillib/LibString.sol";
import "./LibCommonEnum.sol";
import "../utillib/LibStack.sol";
import "../utillib/LibJson.sol";

library LibOrgUser {
    using LibInt for *;
    using LibString for *;
    using LibOrgUser for *;
    using LibJson for *;

    /** @认证状态 : 空值 无效 有效 锁定 */
    enum AccountStatus { NONE,INVALID,VALID,LOCKED }

    /** @机构类型 : */
    enum OrganType { 
        NONE,                   //0-空
        LIMITEDLIABILITYCOMPANY,//1-有限责任公司
        SHARESLIMITEDCOMPANY,   //2-股份有限公司
        GENERALPARTNERSHIP,     //3-普通合伙
        LIMITEDPARTNERSHIP,     //4-有限合伙
        OTHER                   //5-其他
    }
    /* 以下两个字段代替机构类型 */
    enum ParticipantsType{
        NONE,
        SECURITIESCOMPANY,      //证券公司
        FUNDCOMPANY,            //基金公司
        BANK,                   //银行
        OTHER
    }

    enum PublisherType{
        NONE,
        LISTEDCOMPANYOFSHANGHAIMARKET,      //沪市上市公司
        LISTEDCOMPANYOFSHENZHENMARKET,      //深市上市公司
        THREEBOARD,                         //新三板
        OVERSEASLISTEDCOMPANY               //境外上市公司
    }

    enum Sex { NONE, MAN, WOMAN }

    struct Cond{
        string organFullName;
        string businessLicenseNo;
        string organizationNo;
        AccountStatus status;
        uint    pageSize;
        uint    pageNo;
    }

    struct OrgUser{
        //机构投资者信息分为：*关键信息，非关键信息 
        address id;
        string name;                                    //用户名                
        string loginName;                               //登录名
        string password;                                //密码      
        string organFullName;                           //机构全称 => 公司名称
        ParticipantsType participantsType;              //参与人类型
        PublisherType publisherType;                    //发行人类型
        LibCommonEnum.IdType organIdType;               //机构证件类型
        string companyName;                             //公司名称
        string businessLicenseNo;                       //营业执照号码或社会统一信用代码
        uint licenseValidity;                           //营业执照有效期开始日期
        uint licenseInvalidity;                         //营业执照有效期截至日期
        string organizationNo;                          //*组织机构代码或社会统一信用代码
        uint codeValidity;                              //*机构代码有效期开始日期
        uint codeInvalidity;                            //*机构代码有效期截止日期
        uint establishTime;                             //*成立时间
        uint registeredCapital;                         //*注册资本
        string registeredAddr;                          //*公司注册地址
        string communicationAddr;                       //公司通讯地址
        //相关用户基本信息
        string legalRepresentName;                      // *法定i代表人姓名
        LibCommonEnum.IdType legalRepresentIDCertType;            // *法定代表人身份证明文件类型
        string legalRepresentIdCertNo;                  //*法定代表人身份证明文件号码
        string legalRepresentTel;                       //法定代表人固定电话
        string legalRepresentMobile;                    //法定代表人手机号码
        string legalRepresentFax;                       //法定代表人传真
        string legalRepresentMail;                      //法定代表人电子邮箱
        AccountStatus status;
    }

    /**
    *@desc fromJson for OrgUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(OrgUser storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.id = _json.jsonRead("id").toAddress();
        _self.name = _json.jsonRead("name");
        _self.loginName = _json.jsonRead("loginName");
        _self.password = _json.jsonRead("password");
        _self.organFullName = _json.jsonRead("organFullName");
        _self.participantsType = ParticipantsType(_json.jsonRead("participantsType").toUint());
        _self.publisherType = PublisherType(_json.jsonRead("publisherType").toUint());
        _self.organIdType = LibCommonEnum.IdType(_json.jsonRead("organIdType").toUint());
        _self.companyName = _json.jsonRead("companyName");
        _self.businessLicenseNo = _json.jsonRead("businessLicenseNo");
        _self.licenseValidity = _json.jsonRead("licenseValidity").toUint();
        _self.licenseInvalidity = _json.jsonRead("licenseInvalidity").toUint();
        _self.organizationNo = _json.jsonRead("organizationNo");
        _self.codeValidity = _json.jsonRead("codeValidity").toUint();
        _self.codeInvalidity = _json.jsonRead("codeInvalidity").toUint();
        _self.establishTime = _json.jsonRead("establishTime").toUint();
        _self.registeredCapital = _json.jsonRead("registeredCapital").toUint();
        _self.registeredAddr = _json.jsonRead("registeredAddr");
        _self.communicationAddr = _json.jsonRead("communicationAddr");
        _self.legalRepresentName = _json.jsonRead("legalRepresentName");
        _self.legalRepresentIDCertType = LibCommonEnum.IdType(_json.jsonRead("legalRepresentIDCertType").toUint());
        _self.legalRepresentIdCertNo = _json.jsonRead("legalRepresentIdCertNo");
        _self.legalRepresentTel = _json.jsonRead("legalRepresentTel");
        _self.legalRepresentMobile = _json.jsonRead("legalRepresentMobile");
        _self.legalRepresentFax = _json.jsonRead("legalRepresentFax");
        _self.legalRepresentMail = _json.jsonRead("legalRepresentMail");
        _self.status = AccountStatus(_json.jsonRead("status").toUint());
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for OrgUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(OrgUser storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("id", _self.id);
        len = LibStack.appendKeyValue("name", _self.name);
        len = LibStack.appendKeyValue("loginName", _self.loginName);
        len = LibStack.appendKeyValue("password", _self.password);
        len = LibStack.appendKeyValue("organFullName", _self.organFullName);
        len = LibStack.appendKeyValue("participantsType", uint(_self.participantsType));
        len = LibStack.appendKeyValue("publisherType", uint(_self.publisherType));
        len = LibStack.appendKeyValue("organIdType", uint(_self.organIdType));
        len = LibStack.appendKeyValue("companyName", _self.companyName);
        len = LibStack.appendKeyValue("businessLicenseNo", _self.businessLicenseNo);
        len = LibStack.appendKeyValue("licenseValidity", _self.licenseValidity);
        len = LibStack.appendKeyValue("licenseInvalidity", _self.licenseInvalidity);
        len = LibStack.appendKeyValue("organizationNo", _self.organizationNo);
        len = LibStack.appendKeyValue("codeValidity", _self.codeValidity);
        len = LibStack.appendKeyValue("codeInvalidity", _self.codeInvalidity);
        len = LibStack.appendKeyValue("establishTime", _self.establishTime);
        len = LibStack.appendKeyValue("registeredCapital", _self.registeredCapital);
        len = LibStack.appendKeyValue("registeredAddr", _self.registeredAddr);
        len = LibStack.appendKeyValue("communicationAddr", _self.communicationAddr);
        len = LibStack.appendKeyValue("legalRepresentName", _self.legalRepresentName);
        len = LibStack.appendKeyValue("legalRepresentIDCertType", uint(_self.legalRepresentIDCertType));
        len = LibStack.appendKeyValue("legalRepresentIdCertNo", _self.legalRepresentIdCertNo);
        len = LibStack.appendKeyValue("legalRepresentTel", _self.legalRepresentTel);
        len = LibStack.appendKeyValue("legalRepresentMobile", _self.legalRepresentMobile);
        len = LibStack.appendKeyValue("legalRepresentFax", _self.legalRepresentFax);
        len = LibStack.appendKeyValue("legalRepresentMail", _self.legalRepresentMail);
        len = LibStack.appendKeyValue("status", uint(_self.status));
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for OrgUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(OrgUser storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("id"))
            _self.id = _json.jsonRead("id").toAddress();
        if (_json.jsonKeyExists("name"))
            _self.name = _json.jsonRead("name");
        if (_json.jsonKeyExists("loginName"))
            _self.loginName = _json.jsonRead("loginName");
        if (_json.jsonKeyExists("password"))
            _self.password = _json.jsonRead("password");
        if (_json.jsonKeyExists("organFullName"))
            _self.organFullName = _json.jsonRead("organFullName");
        if (_json.jsonKeyExists("participantsType"))
            _self.participantsType = ParticipantsType(_json.jsonRead("participantsType").toUint());
        if (_json.jsonKeyExists("publisherType"))
            _self.publisherType = PublisherType(_json.jsonRead("publisherType").toUint());
        if (_json.jsonKeyExists("organIdType"))
            _self.organIdType = LibCommonEnum.IdType(_json.jsonRead("organIdType").toUint());
        if (_json.jsonKeyExists("companyName"))
            _self.companyName = _json.jsonRead("companyName");
        if (_json.jsonKeyExists("businessLicenseNo"))
            _self.businessLicenseNo = _json.jsonRead("businessLicenseNo");
        if (_json.jsonKeyExists("licenseValidity"))
            _self.licenseValidity = _json.jsonRead("licenseValidity").toUint();
        if (_json.jsonKeyExists("licenseInvalidity"))
            _self.licenseInvalidity = _json.jsonRead("licenseInvalidity").toUint();
        if (_json.jsonKeyExists("organizationNo"))
            _self.organizationNo = _json.jsonRead("organizationNo");
        if (_json.jsonKeyExists("codeValidity"))
            _self.codeValidity = _json.jsonRead("codeValidity").toUint();
        if (_json.jsonKeyExists("codeInvalidity"))
            _self.codeInvalidity = _json.jsonRead("codeInvalidity").toUint();
        if (_json.jsonKeyExists("establishTime"))
            _self.establishTime = _json.jsonRead("establishTime").toUint();
        if (_json.jsonKeyExists("registeredCapital"))
            _self.registeredCapital = _json.jsonRead("registeredCapital").toUint();
        if (_json.jsonKeyExists("registeredAddr"))
            _self.registeredAddr = _json.jsonRead("registeredAddr");
        if (_json.jsonKeyExists("communicationAddr"))
            _self.communicationAddr = _json.jsonRead("communicationAddr");
        if (_json.jsonKeyExists("legalRepresentName"))
            _self.legalRepresentName = _json.jsonRead("legalRepresentName");
        if (_json.jsonKeyExists("legalRepresentIDCertType"))
            _self.legalRepresentIDCertType = LibCommonEnum.IdType(_json.jsonRead("legalRepresentIDCertType").toUint());
        if (_json.jsonKeyExists("legalRepresentIdCertNo"))
            _self.legalRepresentIdCertNo = _json.jsonRead("legalRepresentIdCertNo");
        if (_json.jsonKeyExists("legalRepresentTel"))
            _self.legalRepresentTel = _json.jsonRead("legalRepresentTel");
        if (_json.jsonKeyExists("legalRepresentMobile"))
            _self.legalRepresentMobile = _json.jsonRead("legalRepresentMobile");
        if (_json.jsonKeyExists("legalRepresentFax"))
            _self.legalRepresentFax = _json.jsonRead("legalRepresentFax");
        if (_json.jsonKeyExists("legalRepresentMail"))
            _self.legalRepresentMail = _json.jsonRead("legalRepresentMail");
        if (_json.jsonKeyExists("status"))
            _self.status = AccountStatus(_json.jsonRead("status").toUint());
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for OrgUser
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(OrgUser storage _self) internal {
        delete _self.id;
        delete _self.name;
        delete _self.loginName;
        delete _self.password;
        delete _self.organFullName;
        delete _self.participantsType;
        delete _self.publisherType;
        // _self.organIdType = LibCommonEnum.IdType;
        delete _self.organIdType;
        delete _self.companyName;
        delete _self.businessLicenseNo;
        delete _self.licenseValidity;
        delete _self.licenseInvalidity;
        delete _self.organizationNo;
        delete _self.codeValidity;
        delete _self.codeInvalidity;
        delete _self.establishTime;
        delete _self.registeredCapital;
        delete _self.registeredAddr;
        delete _self.communicationAddr;
        delete _self.legalRepresentName;
        // _self.legalRepresentIDCertType.reset();
        delete _self.legalRepresentIDCertType;
        delete _self.legalRepresentIdCertNo;
        delete _self.legalRepresentTel;
        delete _self.legalRepresentMobile;
        delete _self.legalRepresentFax;
        delete _self.legalRepresentMail;
        delete _self.status;
    }
}