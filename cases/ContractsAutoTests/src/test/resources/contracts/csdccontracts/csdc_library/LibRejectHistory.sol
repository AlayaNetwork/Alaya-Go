pragma solidity ^0.4.12;
/**
* @file LibRejectHistory.sol
* @author yiyating
* @time 2016-12-28
* @desc 消息定义
*/


import "../utillib/LibInt.sol";
import "../utillib/LibString.sol";
import "../utillib/LibJson.sol";
import "../utillib/LibStack.sol";

library LibRejectHistory {
    using LibInt for *;
    using LibString for *;
    using LibRejectHistory for *;
    using LibJson for *;

    enum OperateCode { 
        NONE, 
        PASS,           //通过
        FAIL            //拒绝
    }

    /**
    * @dev Contruction
    */
    struct RejectHistory {
        uint    applyTime;      //申请日期
        string  applyReason;    //申请原因
        uint    status;         //审核结果
        string  auditorName;    //办理人
        uint    auditTime;      //办理时间
        string  auditComment;   //办理意见
    }

    /**
    *@desc fromJson for RejectHistory
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(RejectHistory storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.applyTime = _json.jsonRead("applyTime").toUint();
        _self.applyReason = _json.jsonRead("applyReason");
        _self.status = _json.jsonRead("status").toUint();
        _self.auditorName = _json.jsonRead("auditorName");
        _self.auditTime = _json.jsonRead("auditTime").toUint();
        _self.auditComment = _json.jsonRead("auditComment");
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for RejectHistory
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(RejectHistory storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("applyTime", _self.applyTime);
        len = LibStack.appendKeyValue("applyReason", _self.applyReason);
        len = LibStack.appendKeyValue("status", _self.status);
        len = LibStack.appendKeyValue("auditorName", _self.auditorName);
        len = LibStack.appendKeyValue("auditTime", _self.auditTime);
        len = LibStack.appendKeyValue("auditComment", _self.auditComment);
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc fromJsonArray for RejectHistory
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJsonArray(RejectHistory[] storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }
        _self.length = 0;

        if (!_json.isJson()){
            LibJson.pop();
            return false;
        }

        while (true) {
            string memory key = "[".concat(_self.length.toString(), "]");
            if (!_json.jsonKeyExists(key))
                break;

            _self.length++;
            _self[_self.length-1].fromJson(_json.jsonRead(key));
        }

        LibJson.pop();
        return true;
    }

    /**
    *@desc toJsonArray for RejectHistory
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJsonArray(RejectHistory[] storage _self) internal constant returns(string _json) {
        uint len = 0;
        len = LibStack.push("[");
        for (uint i=0; i<_self.length; ++i) {
            if (i > 0)
                len = LibStack.append(",");
            len = LibStack.append(_self[i].toJson());
        }
        len = LibStack.append("]");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for RejectHistory
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(RejectHistory storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("applyTime"))
            _self.applyTime = _json.jsonRead("applyTime").toUint();
        if (_json.jsonKeyExists("applyReason"))
            _self.applyReason = _json.jsonRead("applyReason");
        if (_json.jsonKeyExists("status"))
            _self.status = _json.jsonRead("status").toUint();
        if (_json.jsonKeyExists("auditorName"))
            _self.auditorName = _json.jsonRead("auditorName");
        if (_json.jsonKeyExists("auditTime"))
            _self.auditTime = _json.jsonRead("auditTime").toUint();
        if (_json.jsonKeyExists("auditComment"))
            _self.auditComment = _json.jsonRead("auditComment");
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for RejectHistory
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(RejectHistory storage _self) internal {
        delete _self.applyTime;
        delete _self.applyReason;
        delete _self.status;
        delete _self.auditorName;
        delete _self.auditTime;
        delete _self.auditComment;
    }


}
