pragma solidity ^0.4.12;
/**
* @file LibAppealing.sol
* @author yiyating
* @time 2016-12-27
* @desc 质押证券定义
*/


import "./LibAudit.sol";
import "./LibComplaint.sol";

library LibAppealing {
    using LibInt for *;
    using LibString for *;
    using LibJson for *;
    using LibAudit for *;
    using LibComplaint for *;
    using LibAppealing for *;
    
    /**
    * @dev Contruction
    */
    struct Appealing {
        address userId;     //申诉用户id
        string  userName;   //申诉用户姓名
        // LibComplaint.Complaint[] complaints;    //争端事项明细(投诉信息)
        LibComplaint.Complaint[] financierInfos;    //被投诉融资信息列表
        LibComplaint.Complaint[] investorInfos;     //被投诉出资信息列表
        string matter;          //争端事项
        string contact;         //联系方式
        uint count;             //申诉次数
        string reason;          //申诉原因
        uint createTime;        //申诉时间
        LibAudit.Audit audit;   //审核信息
    }

    function appeal(Appealing storage _self, string _matter, string _reason, string _contact) internal returns(bool) {
        _self.matter = _matter;
        _self.reason = _reason;
        _self.contact = _contact;
        _self.createTime = now*1000;
    }

    function clear(Appealing storage _self) internal {
        _self.matter = "";
        _self.reason = "";
        _self.contact = "";
        _self.createTime = 0;
        _self.audit.reset();
    }

    /**
    *@desc fromJson for Appealing
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(Appealing storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.userId = _json.jsonRead("userId").toAddress();
        _self.userName = _json.jsonRead("userName");
        _self.financierInfos.fromJsonArray(_json.jsonRead("financierInfos"));
        _self.investorInfos.fromJsonArray(_json.jsonRead("investorInfos"));
        _self.matter = _json.jsonRead("matter");
        _self.contact = _json.jsonRead("contact");
        _self.count = _json.jsonRead("count").toUint();
        _self.reason = _json.jsonRead("reason");
        _self.createTime = _json.jsonRead("createTime").toUint();
        _self.audit.fromJson(_json.jsonRead("audit"));

        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for Appealing
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(Appealing storage _self) internal {
        delete _self.userId;
        delete _self.userName;
        _self.financierInfos.length = 0;
        _self.investorInfos.length = 0;
        delete _self.matter;
        delete _self.contact;
        delete _self.count;
        delete _self.reason;
        delete _self.createTime;
        _self.audit.reset();
    }
}