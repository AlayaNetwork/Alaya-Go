pragma solidity ^0.4.12;
/**
*@file      LibAttachInfo.sol
*@author    yiyating
*@time      2017-07-03
*@desc      the defination of LibAttachInfo
*/

import "../utillib/LibInt.sol";
import "../utillib/LibString.sol";
import "../utillib/LibJson.sol";
import "../utillib/LibStack.sol";

library LibAttachInfo {
    using LibInt for *;
    using LibString for *;
    using LibAttachInfo for *;
    using LibJson for *;
	
	/** 附件信息  */
    struct AttachInfo {
        uint      fileType;     //附件类型
        string    fileId;       //文件id
        string    fileName;     //文件名称
        string    displayNo;    //展示编号
        uint      timestamp;    //生成时间
        uint      section;      //附件总类
        string    ext1;         //扩展字段1
        string    ext2;         //扩展字段2
    }
	
    /**
    *@desc fromJson for AttachInfo
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(AttachInfo storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.fileType = _json.jsonRead("fileType").toUint();
        _self.fileId = _json.jsonRead("fileId");
        _self.fileName = _json.jsonRead("fileName");
        _self.displayNo = _json.jsonRead("displayNo");
        _self.timestamp = _json.jsonRead("timestamp").toUint();
        _self.section = _json.jsonRead("section").toUint();
        _self.ext1 = _json.jsonRead("ext1");
        _self.ext2 = _json.jsonRead("ext2");

        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for AttachInfo
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(AttachInfo storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("fileType", _self.fileType);
        len = LibStack.appendKeyValue("fileId", _self.fileId);
        len = LibStack.appendKeyValue("fileName", _self.fileName);
        len = LibStack.appendKeyValue("displayNo", _self.displayNo);
        len = LibStack.appendKeyValue("timestamp", _self.timestamp);
        len = LibStack.appendKeyValue("section", _self.section);
        len = LibStack.appendKeyValue("ext1", _self.ext1);
        len = LibStack.appendKeyValue("ext2", _self.ext2);
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc fromJsonArray for AttachInfo
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJsonArray(AttachInfo[] storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }
        _self.length = 0;

        if (!_json.isJson()){
            LibJson.pop();
            return false;
        }

        while (true) {
            string memory key = "[".concat(_self.length.toString(), "]");
            if (!_json.jsonKeyExists(key))
                break;

            _self.length++;
            _self[_self.length-1].fromJson(_json.jsonRead(key));
        }

        LibJson.pop();
        return true;
    }

    /**
    *@desc toJsonArray for AttachInfo
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJsonArray(AttachInfo[] storage _self) internal constant returns(string _json) {
        uint len = 0;
        len = LibStack.push("[");
        for (uint i=0; i<_self.length; ++i) {
            if (i > 0)
                len = LibStack.append(",");
            len = LibStack.append(_self[i].toJson());
        }
        len = LibStack.append("]");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for AttachInfo
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(AttachInfo storage _self, string _json) internal returns(bool succ) {
        LibJson.push(_json);
        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("fileType"))
            _self.fileType = _json.jsonRead("fileType").toUint();
        if (_json.jsonKeyExists("fileId"))
            _self.fileId = _json.jsonRead("fileId");
        if (_json.jsonKeyExists("fileName"))
            _self.fileName = _json.jsonRead("fileName");
        if (_json.jsonKeyExists("displayNo"))
            _self.displayNo = _json.jsonRead("displayNo");
        if (_json.jsonKeyExists("timestamp"))
            _self.timestamp = _json.jsonRead("timestamp").toUint();
        if (_json.jsonKeyExists("section"))
            _self.section = _json.jsonRead("section").toUint();
        if (_json.jsonKeyExists("ext1"))
            _self.ext1 = _json.jsonRead("ext1");
        if (_json.jsonKeyExists("ext2"))
            _self.ext2 = _json.jsonRead("ext2");

        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for AttachInfo
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(AttachInfo storage _self) internal {
        delete _self.fileType;
        delete _self.fileId;
        delete _self.fileName;
        delete _self.displayNo;
        delete _self.timestamp;
        delete _self.section;
        delete _self.ext1;
        delete _self.ext2;
    }
}