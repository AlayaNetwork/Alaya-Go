pragma solidity ^0.4.12;
/**
* @file LibSecPledgeApply.sol
* @author yiyating
* @time 2016-12-27
* @desc 证券质押申请定义
*/


import "./LibPledgeSecurity.sol";
import "./LibTradeUser.sol";
import "./LibTradeOperator.sol";
import "./LibAttachInfo.sol";

library LibSecPledgeApply{
    using LibInt for *;
    using LibString for *;
    using LibTradeUser for *;
    using LibTradeOperator for *;
    using LibAttachInfo for *;
    using LibPledgeSecurity for *;
    using LibSecPledgeApply for *;
    using LibJson for *;

    enum PayerType { 
        NONE,       //无
        PLEDGOR,    //出质人
        PLEGDEE     //质权人
    }

    enum DisputeMethod { 
        NONE,       //无
        ONE,    //方式一
        TWO     //方式二
    }

    /**
    * @dev Contruction
    */
    struct SecPledgeApply {
        uint id;                    //id
        string businessNo;          //交易申请流水，业务单号
        uint bizId;             //业务基本信息id
        address pledgorId;    //出质人地址
        string pledgorName;   //出质人姓名
        address pledgeeId;    //质权人地址
        string pledgeeName;    //质权人姓名          
        address managerId;          //经办人id

        LibTradeUser.TradeUser[]        pledgors;       //出质人
        LibTradeUser.TradeUser          pledgee;        //质权人   
        LibTradeOperator.TradeOperator  tradeOperator;  //经办人

        int financingAmount;       //融资金额
        uint financingDateStart;    //融资期限起
        uint financingDateEnd;      //融资期限止
        int financingRate;     //融资利率
        uint financingTarget;       //融资投向
        uint paymentId;             //缴费信息id
        PayerType payerType;        //付费方
        uint warnLine;          //预警线
        uint closeLine;         //平仓线
        string pledgeContractNo;    //质押合同编号
        string pledgeContractFileId;        //质押合同文件id
        string pledgeContractFileName;
        uint secPledgeId;               //成功单号
        uint applyTime; 
        string mainContractCode;  //    主合同编号       s   
        string mainContractName;  //    主合同名称       s   
        DisputeMethod disputeMethod;    //  争议解决方式      s   “1”：方式一 “2”：方式二
        string disputeMethodInfo;  //   争议解决处理内容        s 

        address payerAccount; //支付者地址
        string payerName; //付款人姓名
        uint payAmount; //支付金额
        uint receivedAmount;    //到账金额
        uint receivedTime;      //到账时间
        uint payType;           //付款方式
        string payFlow;           //银行流水号

        uint invoiceId;         //邮寄发票id
        uint djfs;              //冻结方式
        string pledgeRegisterNo; //质押业务登记编号

        LibPledgeSecurity.PledgeSecurity[] appliedSecurities; //质押证券

        string bizAccount;      //券商备付金账户
        LibAttachInfo.AttachInfo[]  frontAttachments;    //前端操作普通附件
        string ywbh;    //业务编号
        uint sfje;      //收费金额

        uint enter400time;  //进入400时间
        uint pledgeTime;    //质押成功时间
    }

    /**
    *@desc fromJson for SecPledgeApply
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(SecPledgeApply storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.id = _json.jsonRead("id").toUint();
        _self.businessNo = _json.jsonRead("businessNo");
        _self.bizId = _json.jsonRead("bizId").toUint();
        _self.pledgorId = _json.jsonRead("pledgorId").toAddress();
        _self.pledgorName = _json.jsonRead("pledgorName");
        _self.pledgeeId = _json.jsonRead("pledgeeId").toAddress();
        _self.pledgeeName = _json.jsonRead("pledgeeName");
        _self.managerId = _json.jsonRead("managerId").toAddress();
        _self.pledgors.fromJsonArray(_json.jsonRead("pledgors"));
        _self.pledgee.fromJson(_json.jsonRead("pledgee"));
        _self.tradeOperator.fromJson(_json.jsonRead("tradeOperator"));
        _self.financingAmount = _json.jsonRead("financingAmount").toInt();
        _self.financingDateStart = _json.jsonRead("financingDateStart").toUint();
        _self.financingDateEnd = _json.jsonRead("financingDateEnd").toUint();
        _self.financingRate = _json.jsonRead("financingRate").toInt();
        _self.financingTarget = _json.jsonRead("financingTarget").toUint();
        _self.paymentId = _json.jsonRead("paymentId").toUint();
        _self.payerType = PayerType(_json.jsonRead("payerType").toUint());
        _self.warnLine = _json.jsonRead("warnLine").toUint();
        _self.closeLine = _json.jsonRead("closeLine").toUint();
        _self.pledgeContractNo = _json.jsonRead("pledgeContractNo");
        _self.pledgeContractFileId = _json.jsonRead("pledgeContractFileId");
        _self.pledgeContractFileName = _json.jsonRead("pledgeContractFileName");
        _self.secPledgeId = _json.jsonRead("secPledgeId").toUint();
        _self.applyTime = _json.jsonRead("applyTime").toUint();
        _self.mainContractCode = _json.jsonRead("mainContractCode");
        _self.mainContractName = _json.jsonRead("mainContractName");
        _self.disputeMethod = DisputeMethod(_json.jsonRead("disputeMethod").toUint());
        _self.disputeMethodInfo = _json.jsonRead("disputeMethodInfo");
        _self.payerAccount = _json.jsonRead("payerAccount").toAddress();
        _self.payerName = _json.jsonRead("payerName");
        _self.payAmount = _json.jsonRead("payAmount").toUint();
        _self.receivedAmount = _json.jsonRead("receivedAmount").toUint();
        _self.receivedTime = _json.jsonRead("receivedTime").toUint();
        _self.payType = _json.jsonRead("payType").toUint();
        _self.payFlow = _json.jsonRead("payFlow");
        _self.invoiceId = _json.jsonRead("invoiceId").toUint();
        _self.djfs = _json.jsonRead("djfs").toUint();
        _self.pledgeRegisterNo = _json.jsonRead("pledgeRegisterNo");
        _self.appliedSecurities.fromJsonArray(_json.jsonRead("appliedSecurities"));
        _self.bizAccount = _json.jsonRead("bizAccount");
        _self.frontAttachments.fromJsonArray(_json.jsonRead("frontAttachments"));
        _self.ywbh = _json.jsonRead("ywbh");
        _self.sfje = _json.jsonRead("sfje").toUint();
        _self.enter400time = _json.jsonRead("enter400time").toUint();
        _self.pledgeTime = _json.jsonRead("pledgeTime").toUint();
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for SecPledgeApply
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(SecPledgeApply storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("id", _self.id);
        len = LibStack.appendKeyValue("businessNo", _self.businessNo);
        len = LibStack.appendKeyValue("bizId", _self.bizId);
        len = LibStack.appendKeyValue("pledgorId", _self.pledgorId);
        len = LibStack.appendKeyValue("pledgorName", _self.pledgorName);
        len = LibStack.appendKeyValue("pledgeeId", _self.pledgeeId);
        len = LibStack.appendKeyValue("pledgeeName", _self.pledgeeName);
        len = LibStack.appendKeyValue("managerId", _self.managerId);
        len = LibStack.appendKeyValue("pledgors", _self.pledgors.toJsonArray());
        len = LibStack.appendKeyValue("pledgee", _self.pledgee.toJson());
        len = LibStack.appendKeyValue("tradeOperator", _self.tradeOperator.toJson());
        len = LibStack.appendKeyValue("financingAmount", _self.financingAmount);
        len = LibStack.appendKeyValue("financingDateStart", _self.financingDateStart);
        len = LibStack.appendKeyValue("financingDateEnd", _self.financingDateEnd);
        len = LibStack.appendKeyValue("financingRate", _self.financingRate);
        len = LibStack.appendKeyValue("financingTarget", _self.financingTarget);
        len = LibStack.appendKeyValue("paymentId", _self.paymentId);
        len = LibStack.appendKeyValue("payerType", uint(_self.payerType));
        len = LibStack.appendKeyValue("warnLine", _self.warnLine);
        len = LibStack.appendKeyValue("closeLine", _self.closeLine);
        len = LibStack.appendKeyValue("pledgeContractNo", _self.pledgeContractNo);
        len = LibStack.appendKeyValue("pledgeContractFileId", _self.pledgeContractFileId);
        len = LibStack.appendKeyValue("pledgeContractFileName", _self.pledgeContractFileName);
        len = LibStack.appendKeyValue("secPledgeId", _self.secPledgeId);
        len = LibStack.appendKeyValue("applyTime", _self.applyTime);
        len = LibStack.appendKeyValue("mainContractCode", _self.mainContractCode);
        len = LibStack.appendKeyValue("mainContractName", _self.mainContractName);
        len = LibStack.appendKeyValue("disputeMethod", uint(_self.disputeMethod));
        len = LibStack.appendKeyValue("disputeMethodInfo", _self.disputeMethodInfo);
        len = LibStack.appendKeyValue("payerAccount", _self.payerAccount);
        len = LibStack.appendKeyValue("payerName", _self.payerName);
        len = LibStack.appendKeyValue("payAmount", _self.payAmount);
        len = LibStack.appendKeyValue("receivedAmount", _self.receivedAmount);
        len = LibStack.appendKeyValue("receivedTime", _self.receivedTime);
        len = LibStack.appendKeyValue("payType", _self.payType);
        len = LibStack.appendKeyValue("payFlow", _self.payFlow);
        len = LibStack.appendKeyValue("invoiceId", _self.invoiceId);
        len = LibStack.appendKeyValue("djfs", _self.djfs);
        len = LibStack.appendKeyValue("pledgeRegisterNo", _self.pledgeRegisterNo);
        len = LibStack.appendKeyValue("appliedSecurities", _self.appliedSecurities.toJsonArray());
        len = LibStack.appendKeyValue("bizAccount", _self.bizAccount);
        len = LibStack.appendKeyValue("frontAttachments", _self.frontAttachments.toJsonArray());
        len = LibStack.appendKeyValue("ywbh", _self.ywbh);
        len = LibStack.appendKeyValue("sfje", _self.sfje);
        len = LibStack.appendKeyValue("enter400time", _self.enter400time);
        len = LibStack.appendKeyValue("pledgeTime", _self.pledgeTime);
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for SecPledgeApply
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(SecPledgeApply storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("id"))
            _self.id = _json.jsonRead("id").toUint();
        if (_json.jsonKeyExists("businessNo"))
            _self.businessNo = _json.jsonRead("businessNo");
        if (_json.jsonKeyExists("bizId"))
            _self.bizId = _json.jsonRead("bizId").toUint();
        if (_json.jsonKeyExists("pledgorId"))
            _self.pledgorId = _json.jsonRead("pledgorId").toAddress();
        if (_json.jsonKeyExists("pledgorName"))
            _self.pledgorName = _json.jsonRead("pledgorName");
        if (_json.jsonKeyExists("pledgeeId"))
            _self.pledgeeId = _json.jsonRead("pledgeeId").toAddress();
        if (_json.jsonKeyExists("pledgeeName"))
            _self.pledgeeName = _json.jsonRead("pledgeeName");
        if (_json.jsonKeyExists("managerId"))
            _self.managerId = _json.jsonRead("managerId").toAddress();
        if (_json.jsonKeyExists("pledgors"))
            _self.pledgors.fromJsonArray(_json.jsonRead("pledgors"));
        if (_json.jsonKeyExists("pledgee"))
            _self.pledgee.fromJson(_json.jsonRead("pledgee"));
        if (_json.jsonKeyExists("tradeOperator"))
            _self.tradeOperator.fromJson(_json.jsonRead("tradeOperator"));
        if (_json.jsonKeyExists("financingAmount"))
            _self.financingAmount = _json.jsonRead("financingAmount").toInt();
        if (_json.jsonKeyExists("financingDateStart"))
            _self.financingDateStart = _json.jsonRead("financingDateStart").toUint();
        if (_json.jsonKeyExists("financingDateEnd"))
            _self.financingDateEnd = _json.jsonRead("financingDateEnd").toUint();
        if (_json.jsonKeyExists("financingRate"))
            _self.financingRate = _json.jsonRead("financingRate").toInt();
        if (_json.jsonKeyExists("financingTarget"))
            _self.financingTarget = _json.jsonRead("financingTarget").toUint();
        if (_json.jsonKeyExists("paymentId"))
            _self.paymentId = _json.jsonRead("paymentId").toUint();
        if (_json.jsonKeyExists("payerType"))
            _self.payerType = PayerType(_json.jsonRead("payerType").toUint());
        if (_json.jsonKeyExists("warnLine"))
            _self.warnLine = _json.jsonRead("warnLine").toUint();
        if (_json.jsonKeyExists("closeLine"))
            _self.closeLine = _json.jsonRead("closeLine").toUint();
        if (_json.jsonKeyExists("pledgeContractNo"))
            _self.pledgeContractNo = _json.jsonRead("pledgeContractNo");
        if (_json.jsonKeyExists("pledgeContractFileId"))
            _self.pledgeContractFileId = _json.jsonRead("pledgeContractFileId");
        if (_json.jsonKeyExists("pledgeContractFileName"))
            _self.pledgeContractFileName = _json.jsonRead("pledgeContractFileName");
        if (_json.jsonKeyExists("secPledgeId"))
            _self.secPledgeId = _json.jsonRead("secPledgeId").toUint();
        if (_json.jsonKeyExists("applyTime"))
            _self.applyTime = _json.jsonRead("applyTime").toUint();
        if (_json.jsonKeyExists("mainContractCode"))
            _self.mainContractCode = _json.jsonRead("mainContractCode");
        if (_json.jsonKeyExists("mainContractName"))
            _self.mainContractName = _json.jsonRead("mainContractName");
        if (_json.jsonKeyExists("disputeMethod"))
            _self.disputeMethod = DisputeMethod(_json.jsonRead("disputeMethod").toUint());
        if (_json.jsonKeyExists("disputeMethodInfo"))
            _self.disputeMethodInfo = _json.jsonRead("disputeMethodInfo");
        if (_json.jsonKeyExists("payerAccount"))
            _self.payerAccount = _json.jsonRead("payerAccount").toAddress();
        if (_json.jsonKeyExists("payerName"))
            _self.payerName = _json.jsonRead("payerName");
        if (_json.jsonKeyExists("payAmount"))
            _self.payAmount = _json.jsonRead("payAmount").toUint();
        if (_json.jsonKeyExists("receivedAmount"))
            _self.receivedAmount = _json.jsonRead("receivedAmount").toUint();
        if (_json.jsonKeyExists("receivedTime"))
            _self.receivedTime = _json.jsonRead("receivedTime").toUint();
        if (_json.jsonKeyExists("payType"))
            _self.payType = _json.jsonRead("payType").toUint();
        if (_json.jsonKeyExists("payFlow"))
            _self.payFlow = _json.jsonRead("payFlow");
        if (_json.jsonKeyExists("invoiceId"))
            _self.invoiceId = _json.jsonRead("invoiceId").toUint();
        if (_json.jsonKeyExists("djfs"))
            _self.djfs = _json.jsonRead("djfs").toUint();
        if (_json.jsonKeyExists("pledgeRegisterNo"))
            _self.pledgeRegisterNo = _json.jsonRead("pledgeRegisterNo");
        if (_json.jsonKeyExists("appliedSecurities"))
            _self.appliedSecurities.fromJsonArray(_json.jsonRead("appliedSecurities"));
        if (_json.jsonKeyExists("bizAccount"))
            _self.bizAccount = _json.jsonRead("bizAccount");
        if (_json.jsonKeyExists("frontAttachments"))
            _self.frontAttachments.fromJsonArray(_json.jsonRead("frontAttachments"));
        if (_json.jsonKeyExists("ywbh"))
            _self.ywbh = _json.jsonRead("ywbh");
        if (_json.jsonKeyExists("sfje"))
            _self.sfje = _json.jsonRead("sfje").toUint();
        if (_json.jsonKeyExists("enter400time"))
            _self.enter400time = _json.jsonRead("enter400time").toUint();
        if (_json.jsonKeyExists("pledgeTime"))
            _self.pledgeTime = _json.jsonRead("pledgeTime").toUint();
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for SecPledgeApply
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(SecPledgeApply storage _self) internal {
        delete _self.id;
        delete _self.businessNo;
        delete _self.bizId;
        delete _self.pledgorId;
        delete _self.pledgorName;
        delete _self.pledgeeId;
        delete _self.pledgeeName;
        delete _self.managerId;
        _self.pledgors.length = 0;
        _self.pledgee.reset();
        _self.tradeOperator.reset();
        delete _self.financingAmount;
        delete _self.financingDateStart;
        delete _self.financingDateEnd;
        delete _self.financingRate;
        delete _self.financingTarget;
        delete _self.paymentId;
        delete _self.payerType;
        delete _self.warnLine;
        delete _self.closeLine;
        delete _self.pledgeContractNo;
        delete _self.pledgeContractFileId;
        delete _self.pledgeContractFileName;
        delete _self.secPledgeId;
        delete _self.applyTime;
        delete _self.mainContractCode;
        delete _self.mainContractName;
        delete _self.disputeMethod;
        delete _self.disputeMethodInfo;
        delete _self.payerAccount;
        delete _self.payerName;
        delete _self.payAmount;
        delete _self.receivedAmount;
        delete _self.receivedTime;
        delete _self.payType;
        delete _self.payFlow;
        delete _self.invoiceId;
        delete _self.djfs;
        delete _self.pledgeRegisterNo;
        _self.appliedSecurities.length = 0;
        delete _self.bizAccount;
        _self.frontAttachments.length = 0;
        delete _self.ywbh;
        delete _self.sfje;
        delete _self.enter400time;
        delete _self.pledgeTime;
    }
}