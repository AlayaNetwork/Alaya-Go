pragma solidity ^0.4.12;
/**
* @file LibDisSecPledgeApply.sol
* @author yiyating
* @time 2016-12-27
* @desc 解除证券质押申请定义
*/


import "./LibPledgeSecurity.sol";
import "./LibTradeUser.sol";
import "./LibTradeOperator.sol";
import "./LibAttachInfo.sol";

library LibDisSecPledgeApply{

    using LibString for *;
    using LibInt for *;
    using LibTradeUser for *;
    using LibTradeOperator for *;
    using LibAttachInfo for *;
    using LibPledgeSecurity for *;
    using LibDisSecPledgeApply for *;
    using LibJson for *;

    /* 解除类型：    { 无， 全部解除， 部分解除 } */
    enum DispledgeType { NONE, ALL, PARTIALLY }

    /* 司法冻结情况是否解除质押
    1-是
    2-否*/
    enum IsFreeze {
        NONE,
        YES,            
        NOT 
    }

    struct DisSecPledgeApply{
        uint id;                    //id
        string businessNo;          //业务单号
        uint bizId;                 //biz对象的外键编号
        address pledgorId;    //出质人地址
        string pledgorName;   //出质人姓名
        address pledgeeId;    //质权人地址
        string pledgeeName;    //质权人姓名          
        address managerId;          //经办人id

        LibTradeUser.TradeUser[]        pledgors;       //出质人
        LibTradeUser.TradeUser          pledgee;        //质权人   
        LibTradeOperator.TradeOperator  tradeOperator;  //经办人

        uint secPledgeId;   //质押成功记录id
        DispledgeType  applyType;       //解除类型
        //uint applyCount;            //解除质押数量
        //uint overAmount;            //剩余融资金额
        uint applyTime;             //解除质押申请日期
        uint   displedgeTime;       //解除日期
        string displedgeNoteNo; //解除质押通知编号      s   AS400返回
        string displedgeNoteFileId;     //解除通知文件hash
        string displedgeNoteFileName;       //解除通知文件名称
        
        string failReason;           //解除失败原因
        uint isFreeze;               //司法冻结情况是否解除质押
        int financingAmountRemain;  //剩余融资金额

        uint evidenceId;             //部分解除质押证明文件id;
        string csjdqSubID;           //解质押子序号

        LibPledgeSecurity.PledgeSecurity[] appliedSecurities;   //申请解除质押证券

        LibAttachInfo.AttachInfo[]  frontAttachments;    //前端操作普通附件
    }

    /**
    *@desc fromJson for DisSecPledgeApply
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(DisSecPledgeApply storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.id = _json.jsonRead("id").toUint();
        _self.businessNo = _json.jsonRead("businessNo");
        _self.bizId = _json.jsonRead("bizId").toUint();
        _self.pledgorId = _json.jsonRead("pledgorId").toAddress();
        _self.pledgorName = _json.jsonRead("pledgorName");
        _self.pledgeeId = _json.jsonRead("pledgeeId").toAddress();
        _self.pledgeeName = _json.jsonRead("pledgeeName");
        _self.managerId = _json.jsonRead("managerId").toAddress();
        _self.pledgors.fromJsonArray(_json.jsonRead("pledgors"));
        _self.pledgee.fromJson(_json.jsonRead("pledgee"));
        _self.tradeOperator.fromJson(_json.jsonRead("tradeOperator"));
        _self.secPledgeId = _json.jsonRead("secPledgeId").toUint();
        _self.applyType = DispledgeType(_json.jsonRead("applyType").toUint());
        _self.applyTime = _json.jsonRead("applyTime").toUint();
        _self.displedgeTime = _json.jsonRead("displedgeTime").toUint();
        _self.displedgeNoteNo = _json.jsonRead("displedgeNoteNo");
        _self.displedgeNoteFileId = _json.jsonRead("displedgeNoteFileId");
        _self.displedgeNoteFileName = _json.jsonRead("displedgeNoteFileName");
        _self.failReason = _json.jsonRead("failReason");
        _self.isFreeze = _json.jsonRead("isFreeze").toUint();
        _self.financingAmountRemain = _json.jsonRead("financingAmountRemain").toInt();
        _self.evidenceId = _json.jsonRead("evidenceId").toUint();
        _self.csjdqSubID = _json.jsonRead("csjdqSubID");
        _self.appliedSecurities.fromJsonArray(_json.jsonRead("appliedSecurities"));
        _self.frontAttachments.fromJsonArray(_json.jsonRead("frontAttachments"));

        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for DisSecPledgeApply
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(DisSecPledgeApply storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("id", _self.id);
        len = LibStack.appendKeyValue("businessNo", _self.businessNo);
        len = LibStack.appendKeyValue("bizId", _self.bizId);
        len = LibStack.appendKeyValue("pledgorId", _self.pledgorId);
        len = LibStack.appendKeyValue("pledgorName", _self.pledgorName);
        len = LibStack.appendKeyValue("pledgeeId", _self.pledgeeId);
        len = LibStack.appendKeyValue("pledgeeName", _self.pledgeeName);
        len = LibStack.appendKeyValue("managerId", _self.managerId);
        len = LibStack.appendKeyValue("pledgors", _self.pledgors.toJsonArray());
        len = LibStack.appendKeyValue("pledgee", _self.pledgee.toJson());
        len = LibStack.appendKeyValue("tradeOperator", _self.tradeOperator.toJson());
        len = LibStack.appendKeyValue("secPledgeId", _self.secPledgeId);
        len = LibStack.appendKeyValue("applyType", uint(_self.applyType));
        len = LibStack.appendKeyValue("applyTime", _self.applyTime);
        len = LibStack.appendKeyValue("displedgeTime", _self.displedgeTime);
        len = LibStack.appendKeyValue("displedgeNoteNo", _self.displedgeNoteNo);
        len = LibStack.appendKeyValue("displedgeNoteFileId", _self.displedgeNoteFileId);
        len = LibStack.appendKeyValue("displedgeNoteFileName", _self.displedgeNoteFileName);
        len = LibStack.appendKeyValue("failReason", _self.failReason);
        len = LibStack.appendKeyValue("isFreeze", _self.isFreeze);
        len = LibStack.appendKeyValue("financingAmountRemain", _self.financingAmountRemain);
        len = LibStack.appendKeyValue("evidenceId", _self.evidenceId);
        len = LibStack.appendKeyValue("csjdqSubID", _self.csjdqSubID);
        len = LibStack.appendKeyValue("appliedSecurities", _self.appliedSecurities.toJsonArray());
        len = LibStack.appendKeyValue("frontAttachments", _self.frontAttachments.toJsonArray());
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for DisSecPledgeApply
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(DisSecPledgeApply storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("id"))
            _self.id = _json.jsonRead("id").toUint();
        if (_json.jsonKeyExists("businessNo"))
            _self.businessNo = _json.jsonRead("businessNo");
        if (_json.jsonKeyExists("bizId"))
            _self.bizId = _json.jsonRead("bizId").toUint();
        if (_json.jsonKeyExists("pledgorId"))
            _self.pledgorId = _json.jsonRead("pledgorId").toAddress();
        if (_json.jsonKeyExists("pledgorName"))
            _self.pledgorName = _json.jsonRead("pledgorName");
        if (_json.jsonKeyExists("pledgeeId"))
            _self.pledgeeId = _json.jsonRead("pledgeeId").toAddress();
        if (_json.jsonKeyExists("pledgeeName"))
            _self.pledgeeName = _json.jsonRead("pledgeeName");
        if (_json.jsonKeyExists("managerId"))
            _self.managerId = _json.jsonRead("managerId").toAddress();
        if (_json.jsonKeyExists("pledgors"))
            _self.pledgors.fromJsonArray(_json.jsonRead("pledgors"));
        if (_json.jsonKeyExists("pledgee"))
            _self.pledgee.fromJson(_json.jsonRead("pledgee"));
        if (_json.jsonKeyExists("tradeOperator"))
            _self.tradeOperator.fromJson(_json.jsonRead("tradeOperator"));
        if (_json.jsonKeyExists("secPledgeId"))
            _self.secPledgeId = _json.jsonRead("secPledgeId").toUint();
        if (_json.jsonKeyExists("applyType"))
            _self.applyType = DispledgeType(_json.jsonRead("applyType").toUint());
        if (_json.jsonKeyExists("applyTime"))
            _self.applyTime = _json.jsonRead("applyTime").toUint();
        if (_json.jsonKeyExists("displedgeTime"))
            _self.displedgeTime = _json.jsonRead("displedgeTime").toUint();
        if (_json.jsonKeyExists("displedgeNoteNo"))
            _self.displedgeNoteNo = _json.jsonRead("displedgeNoteNo");
        if (_json.jsonKeyExists("displedgeNoteFileId"))
            _self.displedgeNoteFileId = _json.jsonRead("displedgeNoteFileId");
        if (_json.jsonKeyExists("displedgeNoteFileName"))
            _self.displedgeNoteFileName = _json.jsonRead("displedgeNoteFileName");
        if (_json.jsonKeyExists("failReason"))
            _self.failReason = _json.jsonRead("failReason");
        if (_json.jsonKeyExists("isFreeze"))
            _self.isFreeze = _json.jsonRead("isFreeze").toUint();
        if (_json.jsonKeyExists("financingAmountRemain"))
            _self.financingAmountRemain = _json.jsonRead("financingAmountRemain").toInt();
        if (_json.jsonKeyExists("evidenceId"))
            _self.evidenceId = _json.jsonRead("evidenceId").toUint();
        if (_json.jsonKeyExists("csjdqSubID"))
            _self.csjdqSubID = _json.jsonRead("csjdqSubID");
        if (_json.jsonKeyExists("appliedSecurities"))
            _self.appliedSecurities.fromJsonArray(_json.jsonRead("appliedSecurities"));
        if (_json.jsonKeyExists("frontAttachments"))
            _self.frontAttachments.fromJsonArray(_json.jsonRead("frontAttachments"));
            
        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for DisSecPledgeApply
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(DisSecPledgeApply storage _self) internal {
        delete _self.id;
        delete _self.businessNo;
        delete _self.bizId;
        delete _self.pledgorId;
        delete _self.pledgorName;
        delete _self.pledgeeId;
        delete _self.pledgeeName;
        delete _self.managerId;
        _self.pledgors.length = 0;
        _self.pledgee.reset();
        _self.tradeOperator.reset();
        delete _self.secPledgeId;
        delete _self.applyType;
        delete _self.applyTime;
        delete _self.displedgeTime;
        delete _self.displedgeNoteNo;
        delete _self.displedgeNoteFileId;
        delete _self.displedgeNoteFileName;
        delete _self.failReason;
        delete _self.isFreeze;
        delete _self.financingAmountRemain;
        delete _self.evidenceId;
        delete _self.csjdqSubID;
        _self.appliedSecurities.length = 0;
        _self.frontAttachments.length = 0;
    }
}