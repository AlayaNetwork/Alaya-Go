pragma solidity ^0.4.12;
/**
* file LibEvidence.sol
* author Xiaofeng Liu
* time 2017-03-20
* desc the defination of Post Information
*/
import "../utillib/LibInt.sol";
import "../utillib/LibString.sol";
import "../utillib/LibJson.sol";
import "../utillib/LibStack.sol";

library LibEvidence{
    using LibInt for *;
    using LibString for *;
    using LibJson for *;
    using LibEvidence for *;

    //证明文件类型
    enum EvidenceType{
        NONE,
        SECPLEDGE,                      //质押登记证明
        PARTIALDISPLEDGEREGISTER,       //部分解除质押登记证明
        DISPLEDGENOTE                   //解除质押登记通知
    }
    //证明文件状态
    enum Status {
        NONE,
        INIT,     //未申请
        APPLIED,  //已申请
        MAILED    //已邮寄
    }
    //证明文件邮寄方式
    enum DeliveryWay{
        NONE,
        sendPay,          //到付
        receivePay        //寄付
    }
    //快递公司
    enum CompanyNo{
        NONE,
        SHUNFENG
    }
    //业务渠道
    enum HandleChannel{
        NONE,
        ONLINE, //在线渠道
        BROKER  //券商代理渠道
    }

    struct Evidence{
        address userId;                         //用户id
        uint id;                                //证明文件id
        uint secPledgeId;                       //质押解质押id
        EvidenceType evidenceType;              //证明文件类型
        HandleChannel handleChannel;            //证明文件办理渠道
        string businessNo;                      //业务流水号
        uint initDate;                          //初始化日期
        uint evidenceDate;                      //证明文件申请日期
        string pledgeRegisterNo;                //质押登记编号
        string pledgeRegisterFileId;            //质押登记证明文件id
        string pledgeRegisterFileName;          //质押登记证明文件名称
        string partialPledgeRegisterNo;         //部分解除质押登记编号
        string partialPledgeRegisterFileId;     //部分质押登记证明文件id
        string partialPledgeRegisterFileName;   //部分质押登记证明文件名称
        string pledgeeName;                     //质权人全称
        string pledgorName;                     //出质人全称
        string receiver;                        //收件人姓名
        string mobile;                          //收件人手机
        string receiverUnit;                    //收件人单位名称
        string detailAddress;                   //详细地址
        string postCode;                        //邮政编码
        CompanyNo companyNo;                    //快递公司名称
        DeliveryWay deliveryWay;                //邮寄方式
        string deliveryNo;                      //物流单号
        Status status;                          //状态
    }
    struct Cond{
        address userId;
        EvidenceType evidenceType;
        uint initDate;
        uint minInitDate;
        uint maxInitDate;
        uint evidenceDate;
        string businessNo;
        string receiver;
        uint containInit; // 0 包含 1 不包含
        uint handleChannel;
        Status status;
        uint pageSize;
        uint pageNo;
    }

    function fromJson(Cond storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.userId = _json.jsonRead("userId").toAddress();
        _self.evidenceType = EvidenceType(_json.jsonRead("evidenceType").toUint());
        _self.initDate = _json.jsonRead("initDate").toUint();
        _self.minInitDate = _json.jsonRead("minInitDate").toUint();
        _self.maxInitDate = _json.jsonRead("maxInitDate").toUint();
        _self.evidenceDate = _json.jsonRead("evidenceDate").toUint();
        _self.businessNo = _json.jsonRead("businessNo");
        _self.receiver = _json.jsonRead("receiver");
        _self.containInit = _json.jsonRead("containInit").toUint();
        _self.handleChannel = _json.jsonRead("handleChannel").toUint();
        _self.status = Status(_json.jsonRead("status").toUint());
        _self.pageSize = _json.jsonRead("pageSize").toUint();
        _self.pageNo = _json.jsonRead("pageNo").toUint();

        LibJson.pop();
        return true;
    }

    function reset(Cond storage _self) internal {
        delete _self.userId;
        delete _self.evidenceType;
        delete _self.initDate;
        delete _self.minInitDate;
        delete _self.maxInitDate;
        delete _self.evidenceDate;
        delete _self.businessNo;
        delete _self.receiver;
        delete _self.containInit;
        delete _self.handleChannel;
        delete _self.status;
        delete _self.pageSize;
        delete _self.pageNo;
    }

    /**
    *@desc fromJson for Evidence
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(Evidence storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.userId = _json.jsonRead("userId").toAddress();
        _self.id = _json.jsonRead("id").toUint();
        _self.secPledgeId = _json.jsonRead("secPledgeId").toUint();
        _self.evidenceType = EvidenceType(_json.jsonRead("evidenceType").toUint());
        _self.handleChannel = HandleChannel(_json.jsonRead("handleChannel").toUint());
        _self.businessNo = _json.jsonRead("businessNo");
        _self.initDate = _json.jsonRead("initDate").toUint();
        _self.evidenceDate = _json.jsonRead("evidenceDate").toUint();
        _self.pledgeRegisterNo = _json.jsonRead("pledgeRegisterNo");
        _self.pledgeRegisterFileId = _json.jsonRead("pledgeRegisterFileId");
        _self.pledgeRegisterFileName = _json.jsonRead("pledgeRegisterFileName");
        _self.partialPledgeRegisterNo = _json.jsonRead("partialPledgeRegisterNo");
        _self.partialPledgeRegisterFileId = _json.jsonRead("partialPledgeRegisterFileId");
        _self.partialPledgeRegisterFileName = _json.jsonRead("partialPledgeRegisterFileName");
        _self.pledgeeName = _json.jsonRead("pledgeeName");
        _self.pledgorName = _json.jsonRead("pledgorName");
        _self.receiver = _json.jsonRead("receiver");
        _self.mobile = _json.jsonRead("mobile");
        _self.receiverUnit = _json.jsonRead("receiverUnit");
        _self.detailAddress = _json.jsonRead("detailAddress");
        _self.postCode = _json.jsonRead("postCode");
        _self.companyNo = CompanyNo(_json.jsonRead("companyNo").toUint());
        _self.deliveryWay = DeliveryWay(_json.jsonRead("deliveryWay").toUint());
        _self.deliveryNo = _json.jsonRead("deliveryNo");
        _self.status = Status(_json.jsonRead("status").toUint());

        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for Evidence
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(Evidence storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("userId", _self.userId);
        len = LibStack.appendKeyValue("id", _self.id);
        len = LibStack.appendKeyValue("secPledgeId", _self.secPledgeId);
        len = LibStack.appendKeyValue("evidenceType", uint(_self.evidenceType));
        len = LibStack.appendKeyValue("handleChannel", uint(_self.handleChannel));
        len = LibStack.appendKeyValue("businessNo", _self.businessNo);
        len = LibStack.appendKeyValue("initDate", _self.initDate);
        len = LibStack.appendKeyValue("evidenceDate", _self.evidenceDate);
        len = LibStack.appendKeyValue("pledgeRegisterNo", _self.pledgeRegisterNo);
        len = LibStack.appendKeyValue("pledgeRegisterFileId", _self.pledgeRegisterFileId);
        len = LibStack.appendKeyValue("pledgeRegisterFileName", _self.pledgeRegisterFileName);
        len = LibStack.appendKeyValue("partialPledgeRegisterNo", _self.partialPledgeRegisterNo);
        len = LibStack.appendKeyValue("partialPledgeRegisterFileId", _self.partialPledgeRegisterFileId);
        len = LibStack.appendKeyValue("partialPledgeRegisterFileName", _self.partialPledgeRegisterFileName);
        len = LibStack.appendKeyValue("pledgeeName", _self.pledgeeName);
        len = LibStack.appendKeyValue("pledgorName", _self.pledgorName);
        len = LibStack.appendKeyValue("receiver", _self.receiver);
        len = LibStack.appendKeyValue("mobile", _self.mobile);
        len = LibStack.appendKeyValue("receiverUnit", _self.receiverUnit);
        len = LibStack.appendKeyValue("detailAddress", _self.detailAddress);
        len = LibStack.appendKeyValue("postCode", _self.postCode);
        len = LibStack.appendKeyValue("companyNo", uint(_self.companyNo));
        len = LibStack.appendKeyValue("deliveryWay", uint(_self.deliveryWay));
        len = LibStack.appendKeyValue("deliveryNo", _self.deliveryNo);
        len = LibStack.appendKeyValue("status", uint(_self.status));
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for Evidence
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(Evidence storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("userId"))
            _self.userId = _json.jsonRead("userId").toAddress();
        if (_json.jsonKeyExists("id"))
            _self.id = _json.jsonRead("id").toUint();
        if (_json.jsonKeyExists("secPledgeId"))
            _self.secPledgeId = _json.jsonRead("secPledgeId").toUint();
        if (_json.jsonKeyExists("evidenceType"))
            _self.evidenceType = EvidenceType(_json.jsonRead("evidenceType").toUint());
        if (_json.jsonKeyExists("handleChannel"))
            _self.handleChannel = HandleChannel(_json.jsonRead("handleChannel").toUint());
        if (_json.jsonKeyExists("businessNo"))
            _self.businessNo = _json.jsonRead("businessNo");
        if (_json.jsonKeyExists("initDate"))
            _self.initDate = _json.jsonRead("initDate").toUint();
        if (_json.jsonKeyExists("evidenceDate"))
            _self.evidenceDate = _json.jsonRead("evidenceDate").toUint();
        if (_json.jsonKeyExists("pledgeRegisterNo"))
            _self.pledgeRegisterNo = _json.jsonRead("pledgeRegisterNo");
        if (_json.jsonKeyExists("pledgeRegisterFileId"))
            _self.pledgeRegisterFileId = _json.jsonRead("pledgeRegisterFileId");
        if (_json.jsonKeyExists("pledgeRegisterFileName"))
            _self.pledgeRegisterFileName = _json.jsonRead("pledgeRegisterFileName");
        if (_json.jsonKeyExists("partialPledgeRegisterNo"))
            _self.partialPledgeRegisterNo = _json.jsonRead("partialPledgeRegisterNo");
        if (_json.jsonKeyExists("partialPledgeRegisterFileId"))
            _self.partialPledgeRegisterFileId = _json.jsonRead("partialPledgeRegisterFileId");
        if (_json.jsonKeyExists("partialPledgeRegisterFileName"))
            _self.partialPledgeRegisterFileName = _json.jsonRead("partialPledgeRegisterFileName");
        if (_json.jsonKeyExists("pledgeeName"))
            _self.pledgeeName = _json.jsonRead("pledgeeName");
        if (_json.jsonKeyExists("pledgorName"))
            _self.pledgorName = _json.jsonRead("pledgorName");
        if (_json.jsonKeyExists("receiver"))
            _self.receiver = _json.jsonRead("receiver");
        if (_json.jsonKeyExists("mobile"))
            _self.mobile = _json.jsonRead("mobile");
        if (_json.jsonKeyExists("receiverUnit"))
            _self.receiverUnit = _json.jsonRead("receiverUnit");
        if (_json.jsonKeyExists("detailAddress"))
            _self.detailAddress = _json.jsonRead("detailAddress");
        if (_json.jsonKeyExists("postCode"))
            _self.postCode = _json.jsonRead("postCode");
        if (_json.jsonKeyExists("companyNo"))
            _self.companyNo = CompanyNo(_json.jsonRead("companyNo").toUint());
        if (_json.jsonKeyExists("deliveryWay"))
            _self.deliveryWay = DeliveryWay(_json.jsonRead("deliveryWay").toUint());
        if (_json.jsonKeyExists("deliveryNo"))
            _self.deliveryNo = _json.jsonRead("deliveryNo");
        if (_json.jsonKeyExists("status"))
            _self.status = Status(_json.jsonRead("status").toUint());
            
        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for Evidence
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(Evidence storage _self) internal {
        delete _self.userId;
        delete _self.id;
        delete _self.secPledgeId;
        delete _self.evidenceType;
        delete _self.handleChannel;
        delete _self.businessNo;
        delete _self.initDate;
        delete _self.evidenceDate;
        delete _self.pledgeRegisterNo;
        delete _self.pledgeRegisterFileId;
        delete _self.pledgeRegisterFileName;
        delete _self.partialPledgeRegisterNo;
        delete _self.partialPledgeRegisterFileId;
        delete _self.partialPledgeRegisterFileName;
        delete _self.pledgeeName;
        delete _self.pledgorName;
        delete _self.receiver;
        delete _self.mobile;
        delete _self.receiverUnit;
        delete _self.detailAddress;
        delete _self.postCode;
        delete _self.companyNo;
        delete _self.deliveryWay;
        delete _self.deliveryNo;
        delete _self.status;
    }
}
