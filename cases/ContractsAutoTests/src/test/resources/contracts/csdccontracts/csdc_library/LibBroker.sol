pragma solidity ^0.4.12;
/**
*@file      LibBroker.sol
*@author    xuhui
*@time      2016-3-24
*@desc      the defination of LibBroker
*/

import "../utillib/LibInt.sol";
import "../utillib/LibString.sol";
import "../utillib/LibJson.sol";
import "../utillib/LibStack.sol";

library LibBroker {
    using LibInt for *;
    using LibString for *;
    using LibBroker for *;
    using LibJson for *;

    struct Broker {
        uint id;            //内部标识
        string bizAccount;
        string orgNo;
        string orgName;
        string email;
        string addr;
        string postalCode;
    }

    /**
    *@desc fromJson for Broker
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function fromJson(Broker storage _self, string _json) internal returns(bool succ) {
        _self.reset();
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        _self.id = _json.jsonRead("id").toUint();
        _self.bizAccount = _json.jsonRead("bizAccount");
        _self.orgNo = _json.jsonRead("orgNo");
        _self.orgName = _json.jsonRead("orgName");
        _self.email = _json.jsonRead("email");
        _self.addr = _json.jsonRead("addr");
        _self.postalCode = _json.jsonRead("postalCode");
        
        LibJson.pop();
        return true;
    }

    /**
    *@desc toJson for Broker
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function toJson(Broker storage _self) internal constant returns (string _json) {
        uint len = 0;
        len = LibStack.push("{");
        len = LibStack.appendKeyValue("id", _self.id);
        len = LibStack.appendKeyValue("bizAccount", _self.bizAccount);
        len = LibStack.appendKeyValue("orgNo", _self.orgNo);
        len = LibStack.appendKeyValue("orgName", _self.orgName);
        len = LibStack.appendKeyValue("email", _self.email);
        len = LibStack.appendKeyValue("addr", _self.addr);
        len = LibStack.appendKeyValue("postalCode", _self.postalCode);
        len = LibStack.append("}");
        _json = LibStack.popex(len);
    }

    /**
    *@desc update for Broker
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function update(Broker storage _self, string _json) internal returns(bool succ) {
        if(LibJson.push(_json) == 0) {
            return false;
        }

        if (!_json.isJson()) {
            LibJson.pop();
            return false;
        }

        if (_json.jsonKeyExists("id"))
            _self.id = _json.jsonRead("id").toUint();
        if (_json.jsonKeyExists("bizAccount"))
            _self.bizAccount = _json.jsonRead("bizAccount");
        if (_json.jsonKeyExists("orgNo"))
            _self.orgNo = _json.jsonRead("orgNo");
        if (_json.jsonKeyExists("orgName"))
            _self.orgName = _json.jsonRead("orgName");
        if (_json.jsonKeyExists("email"))
            _self.email = _json.jsonRead("email");
        if (_json.jsonKeyExists("addr"))
            _self.addr = _json.jsonRead("addr");
        if (_json.jsonKeyExists("postalCode"))
            _self.postalCode = _json.jsonRead("postalCode");

        LibJson.pop();
        return true;
    }

    /**
    *@desc reset for Broker
    *      Generated by juzhen SolidityStructTool automatically.
    *      Not to edit this code manually.
    */
    function reset(Broker storage _self) internal {
        delete _self.id;
        delete _self.bizAccount;
        delete _self.orgNo;
        delete _self.orgName;
        delete _self.email;
        delete _self.addr;
        delete _self.postalCode;
    }
}