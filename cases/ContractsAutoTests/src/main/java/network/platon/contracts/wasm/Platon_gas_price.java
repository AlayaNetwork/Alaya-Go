package network.platon.contracts.wasm;

import com.platon.rlp.datatypes.Uint64;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.web3j.abi.WasmEventEncoder;
import org.web3j.abi.WasmFunctionEncoder;
import org.web3j.abi.datatypes.WasmEvent;
import org.web3j.abi.datatypes.WasmEventParameter;
import org.web3j.abi.datatypes.WasmFunction;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.PlatonFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.WasmContract;
import org.web3j.tx.gas.GasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://github.com/PlatONnetwork/client-sdk-java/releases">platon-web3j command line tools</a>,
 * or the org.web3j.codegen.WasmFunctionWrapperGenerator in the 
 * <a href="https://github.com/PlatONnetwork/client-sdk-java/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with platon-web3j version 0.13.1.1.
 */
public class Platon_gas_price extends WasmContract {
    private static String BINARY_0 = "0x0061736d01000000012d0960017f0060000060017f017f60027f7f0060027f7f017f6000017f60047f7f7f7f017f6000017e60017f017e025a0403656e760c706c61746f6e5f70616e6963000103656e760a706c61746f6e5f676173000703656e7617706c61746f6e5f6765745f696e7075745f6c656e677468000503656e7610706c61746f6e5f6765745f696e707574000003121101000002040106030400020803010102020405017001030305030100020608017f0141b088040b073904066d656d6f72790200115f5f7761736d5f63616c6c5f63746f727300040f5f5f66756e63735f6f6e5f65786974001106696e766f6b6500090908010041010b0205060ab41911040010120b0300010b050010011a0b990101047f230041106b220124002001200036020c2000047f41a008200041086a2202411076220041a0082802006a2203360200419c08419c08280200220420026a41076a417871220236020002400240200341107420024d044041a008200341016a360200200041016a21000c010b2000450d010b200040000d0010000b20042001410c6a100841086a0541000b2100200141106a240020000bf50801077f03400240200020036a2104200120036a210220034104460d002002410371450d00200420022d00003a0000200341016a21030c010b0b410420036b21050240200441037122064504400340200541104f0440200020036a2202200120036a2204290200370200200241086a200441086a290200370200200341106a2103200541706a21050c010b0b027f2005410871450440200120036a2102200020036a0c010b200020036a2204200120036a2203290200370200200341086a2102200441086a0b21032005410471044020032002280200360200200341046a2103200241046a21020b20054102710440200320022f00003b0000200341026a2103200241026a21020b2005410171450d01200320022d00003a000020000f0b024020054120490d002006417f6a220641024b0d00024002400240024002400240200641016b0e020102000b2004200120036a220228020022063a0000200441016a200241016a2f00003b0000200041036a2108410120036b2105034020054111490d03200320086a2202200120036a220441046a2802002207410874200641187672360200200241046a200441086a2802002206410874200741187672360200200241086a2004410c6a28020022074108742006411876723602002002410c6a200441106a2802002206410874200741187672360200200341106a2103200541706a21050c000b000b2004200120036a220228020022063a0000200441016a200241016a2d00003a0000200041026a2108410220036b2105034020054112490d03200320086a2202200120036a220441046a2802002207411074200641107672360200200241046a200441086a2802002206411074200741107672360200200241086a2004410c6a28020022074110742006411076723602002002410c6a200441106a2802002206411074200741107672360200200341106a2103200541706a21050c000b000b2004200120036a28020022063a0000200041016a21082003417f7341046a2105034020054113490d03200320086a2202200120036a220441046a2802002207411874200641087672360200200241046a200441086a2802002206411874200741087672360200200241086a2004410c6a28020022074118742006410876723602002002410c6a200441106a2802002206411874200741087672360200200341106a2103200541706a21050c000b000b200120036a41036a2102200020036a41036a21040c020b200120036a41026a2102200020036a41026a21040c010b200120036a41016a2102200020036a41016a21040b20054110710440200420022d00003a00002004200228000136000120042002290005370005200420022f000d3b000d200420022d000f3a000f200441106a2104200241106a21020b2005410871044020042002290000370000200441086a2104200241086a21020b2005410471044020042002280000360000200441046a2104200241046a21020b20054102710440200420022f00003b0000200441026a2104200241026a21020b2005410171450d00200420022d00003a00000b20000ba50502087f017e230041406a220524001012100222001007220110030240200541206a20012000411c100a2204280208450440200441146a2802002100200428021021010c010b200541386a2004100b20042005280238200528023c100c36020c200541086a2004100b410021002004027f410020052802082202450d001a4100200528020c2206200428020c2203490d001a200620032003417f461b210020020b2201360210200441146a2000360200200441003602080b200541086a200120004114100a2200100d024002402000280204450d002000100d0240200028020022022c0000220141004e044020010d010c020b200141807f460d00200141ff0171220341b7014d0440200028020441014d04401000200028020021020b20022d00010d010c020b200341bf014b0d012000280204200141ff017141ca7e6a22014d04401000200028020021020b200120026a2d0000450d010b2000280204450d0020022d000041c001490d010b10000b2000100e2206200028020422024b04401000200028020421020b20002802002107024002400240200204404100210320072c00002200417f4a0d01027f200041ff0171220341bf014d04404100200041ff017141b801490d011a200341c97e6a0c010b4100200041ff017141f801490d001a200341897e6a0b41016a21030c010b4101210320070d00410021000c010b41002100200320066a20024b0d0020022006490d004100210120022003490d01200320076a2101200220036b20062006417f461b22004109490d0110000c010b410021010b0340200004402000417f6a210020013100002008420886842108200141016a21010c010b0b024002402008500d00418008100f20085104402004410110100c020b418508100f2008520d002004410210100c010b10000b1011200541406b24000b730020004200370210200042ffffffff0f370208200020023602042000200136020002402003410871450d002000101320024f0d002003410471044010000c010b200042003702000b02402003411071450d002000101320024d0d0020034104710440100020000f0b200042003702000b20000b7201047f2001100e220220012802044b044010000b2001101421032000027f0240200128020022054504400c010b200220036a200128020422014b0d0020012003490d00410020012002490d011a200320056a2104200120036b20022002417f461b0c010b41000b360204200020043602000b2701017f230041206b22022400200241086a200020014114100a10132100200241206a240020000b4101017f200028020445044010000b0240200028020022012d0000418101470d00200028020441014d047f100020002802000520010b2c00014100480d0010000b0bff0201037f200028020445044041000f0b2000100d41012102024020002802002c00002201417f4a0d00200141ff0171220341b7014d0440200341807f6a0f0b02400240200141ff0171220141bf014d0440024020002802042201200341c97e6a22024d047f100020002802040520010b4102490d0020002802002d00010d0010000b200241054f044010000b20002802002d000145044010000b4100210241b7012101034020012003460440200241384f0d030c0405200028020020016a41ca7e6a2d00002002410874722102200141016a21010c010b000b000b200141f7014d0440200341c07e6a0f0b024020002802042201200341897e6a22024d047f100020002802040520010b4102490d0020002802002d00010d0010000b200241054f044010000b20002802002d000145044010000b4100210241f701210103402001200346044020024138490d0305200028020020016a418a7e6a2d00002002410874722102200141016a21010c010b0b0b200241ff7d490d010b10000b20020b3901027e42a5c688a1c89ca7f94b210103402000300000220250450440200041016a2100200142b383808080207e20028521010c010b0b20010b920101047f230041106b22022400024002402000280204450d0020002802002d000041c001490d00200241086a2000100b41012104200228020c2100034020000440200241002002280208220320032000100c22056a20034520002005497222031b3602084100200020056b20031b21002004417f6a21040c010b0b2004450d010b10000b20022001110000200241106a24000b880101037f418c084101360200419008280200210003402000044003404194084194082802002201417f6a22023602002001410148450440418c084100360200200020024102746a22004184016a280200200041046a280200110000418c08410136020041900828020021000c010b0b4194084120360200419008200028020022003602000c010b0b0b3501017f230041106b220041b0880436020c419808200028020c41076a4178712200360200419c08200036020041a0083f003602000b2e01017f200028020445044041000f0b4101210120002802002c0000417f4c047f200010142000100e6a0520010b0b5b00027f027f41002000280204450d001a410020002802002c0000417f4a0d011a20002802002d0000220041bf014d04404100200041b801490d011a200041c97e6a0c010b4100200041f801490d001a200041897e6a0b41016a0b0b0b1001004180080b09696e69740074657374";

    public static String BINARY = BINARY_0;

    public static final String FUNC_TEST = "test";

    public static final WasmEvent GASUSED_EVENT = new WasmEvent("GasUsed", Arrays.asList(), Arrays.asList(new WasmEventParameter(String.class) , new WasmEventParameter(Uint64.class)));
    ;

    protected Platon_gas_price(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider, Long chainId) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider, chainId);
    }

    protected Platon_gas_price(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, Long chainId) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider, chainId);
    }

    public List<GasUsedEventResponse> getGasUsedEvents(TransactionReceipt transactionReceipt) {
        List<WasmContract.WasmEventValuesWithLog> valueList = extractEventParametersWithLog(GASUSED_EVENT, transactionReceipt);
        ArrayList<GasUsedEventResponse> responses = new ArrayList<GasUsedEventResponse>(valueList.size());
        for (WasmContract.WasmEventValuesWithLog eventValues : valueList) {
            GasUsedEventResponse typedResponse = new GasUsedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.arg1 = (String) eventValues.getNonIndexedValues().get(0);
            typedResponse.arg2 = (Uint64) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GasUsedEventResponse> gasUsedEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, GasUsedEventResponse>() {
            @Override
            public GasUsedEventResponse call(Log log) {
                WasmContract.WasmEventValuesWithLog eventValues = extractEventParametersWithLog(GASUSED_EVENT, log);
                GasUsedEventResponse typedResponse = new GasUsedEventResponse();
                typedResponse.log = log;
                typedResponse.arg1 = (String) eventValues.getNonIndexedValues().get(0);
                typedResponse.arg2 = (Uint64) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<GasUsedEventResponse> gasUsedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(WasmEventEncoder.encode(GASUSED_EVENT));
        return gasUsedEventObservable(filter);
    }

    public static RemoteCall<Platon_gas_price> deploy(Web3j web3j, Credentials credentials, GasProvider contractGasProvider, Long chainId) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList());
        return deployRemoteCall(Platon_gas_price.class, web3j, credentials, contractGasProvider, encodedConstructor, chainId);
    }

    public static RemoteCall<Platon_gas_price> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, Long chainId) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList());
        return deployRemoteCall(Platon_gas_price.class, web3j, transactionManager, contractGasProvider, encodedConstructor, chainId);
    }

    public static RemoteCall<Platon_gas_price> deploy(Web3j web3j, Credentials credentials, GasProvider contractGasProvider, BigInteger initialVonValue, Long chainId) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList());
        return deployRemoteCall(Platon_gas_price.class, web3j, credentials, contractGasProvider, encodedConstructor, initialVonValue, chainId);
    }

    public static RemoteCall<Platon_gas_price> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, BigInteger initialVonValue, Long chainId) {
        String encodedConstructor = WasmFunctionEncoder.encodeConstructor(BINARY, Arrays.asList());
        return deployRemoteCall(Platon_gas_price.class, web3j, transactionManager, contractGasProvider, encodedConstructor, initialVonValue, chainId);
    }

    public RemoteCall<TransactionReceipt> test() {
        final WasmFunction function = new WasmFunction(FUNC_TEST, Arrays.asList(), Void.class);
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> test(BigInteger vonValue) {
        final WasmFunction function = new WasmFunction(FUNC_TEST, Arrays.asList(), Void.class);
        return executeRemoteCallTransaction(function, vonValue);
    }

    public static Platon_gas_price load(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider, Long chainId) {
        return new Platon_gas_price(contractAddress, web3j, credentials, contractGasProvider, chainId);
    }

    public static Platon_gas_price load(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, Long chainId) {
        return new Platon_gas_price(contractAddress, web3j, transactionManager, contractGasProvider, chainId);
    }

    public static class GasUsedEventResponse {
        public Log log;

        public String arg1;

        public Uint64 arg2;
    }
}
