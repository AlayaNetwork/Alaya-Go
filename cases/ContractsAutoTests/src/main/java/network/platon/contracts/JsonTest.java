package network.platon.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.GasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 0.7.5.0.
 */
public class JsonTest extends Contract {
    private static final String BINARY = "6060604052600060025560206040519081016040528060008152506003908051906020019062000031929190620011f4565b5034156200003e57600080fd5b5b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506011600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b620001b96040805190810160405280600a81526020017f437364634d6f64756c65000000000000000000000000000000000000000000008152506040805190810160405280600781526020017f302e302e312e30000000000000000000000000000000000000000000000000008152506040805190810160405280600881526020017f4a736f6e546573740000000000000000000000000000000000000000000000008152506040805190810160405280600781526020017f302e302e312e3000000000000000000000000000000000000000000000000000815250620001c06401000000000262000b99176401000000009004565b5b620012b7565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e24c52c868686866000604051602001526040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b83811015620002875780820151818401525b60208101905062000269565b50505050905090810190601f168015620002b55780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b83811015620002f15780820151818401525b602081019050620002d3565b50505050905090810190601f1680156200031f5780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b838110156200035b5780820151818401525b6020810190506200033d565b50505050905090810190601f168015620003895780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b83811015620003c55780820151818401525b602081019050620003a7565b50505050905090810190601f168015620003f35780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15156200041857600080fd5b6102c65a03f115156200042a57600080fd5b505050604051805190509050600081141515620004c557620004be606060405190810160405280602381526020017f726567697374657220636f6e74726163743a206661696c65642e2061626f727481526020017f21212100000000000000000000000000000000000000000000000000000000008152508685620004f16401000000000262000e99176401000000009004565b50620004ea565b620004e88585858530620006946401000000000262002141176401000000009004565b505b5050505050565b6000620004fd6200127b565b6000806000606060405190810160405280602b81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b3035766d6c6f675d0000000000000000000000000000000000000000008152509350620005bb6040805190810160405280600181526020017f7c00000000000000000000000000000000000000000000000000000000000000815250898662000973640100000000026200239417909291906401000000009004565b9350620006176040805190810160405280600181526020017f7c00000000000000000000000000000000000000000000000000000000000000815250888662000973640100000000026200239417909291906401000000009004565b9350620006736040805190810160405280600181526020017f7c00000000000000000000000000000000000000000000000000000000000000815250878662000973640100000000026200239417909291906401000000009004565b9350835191506020840192508183209050600094505b505050509392505050565b6000620006a06200127b565b620006fa6040805190810160405280600181526020017f7c00000000000000000000000000000000000000000000000000000000000000815250878962000973640100000000026200239417909291906401000000009004565b9050620007566040805190810160405280600181526020017f7c00000000000000000000000000000000000000000000000000000000000000815250868362000973640100000000026200239417909291906401000000009004565b9050620007b26040805190810160405280600181526020017f7c00000000000000000000000000000000000000000000000000000000000000815250858362000973640100000000026200239417909291906401000000009004565b90506200083e6040805190810160405280601381526020017f636f6e7472616374416464727c75706461746500000000000000000000000000815250620008238573ffffffffffffffffffffffffffffffffffffffff1662000a566401000000000262002432176401000000009004565b8362000c6f6401000000000262001d05176401000000009004565b9150816000141515620008dc57620008d56040805190810160405280600e81526020017f4f776e65724e616d65642e736f6c0000000000000000000000000000000000008152506040805190810160405280601b81526020017f75706461746520636f6e747261637441646472206661696c65642e000000000081525062000dd06401000000000262001898176401000000009004565b5062000968565b620009666040805190810160405280600e81526020017f4f776e65724e616d65642e736f6c0000000000000000000000000000000000008152506040805190810160405280601c81526020017f75706461746520636f6e74726163744164647220737563636573732e0000000081525062000dd06401000000000262001898176401000000009004565b505b5b5095945050505050565b6200097d6200127b565b6000806000806000865188518a5101016040518059106200099b5750595b908082528060200260200182016040525b50955060208901945060208801935060208701925060208601915060009050620009ef818301868b5162000f166401000000000262002f2e176401000000009004565b88518101905062000a19818301858a5162000f166401000000000262002f2e176401000000009004565b87518101905062000a4381830184895162000f166401000000000262002f2e176401000000009004565b8651810190505b50505050509392505050565b62000a606200127b565b600080602a60405180591062000a735750595b908082528060200260200182016040525b5092507f300000000000000000000000000000000000000000000000000000000000000083600081518110151562000ab857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000083600181518110151562000b1957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350602991505b60028260ff1610151562000c6757600f8416905060108481151562000b6f57fe5b049350600a8160ff16101562000bed57603081017f010000000000000000000000000000000000000000000000000000000000000002838360ff1681518110151562000bb757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535062000c59565b6061600a8203017f010000000000000000000000000000000000000000000000000000000000000002838360ff1681518110151562000c2857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b5b8160019003915062000b4e565b5b5050919050565b600062000c7b6200127b565b6000806000606060405190810160405280602d81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b3037777269746564625d00000000000000000000000000000000000000815250935062000d2262000d0489600262000f656401000000000262002b1d176401000000009004565b8562000fbe6401000000000262002b54179091906401000000009004565b935062000d6762000d4988600462000f656401000000000262002b1d176401000000009004565b8562000fbe6401000000000262002b54179091906401000000009004565b935062000dac62000d8e87600962000f656401000000000262002b1d176401000000009004565b8562000fbe6401000000000262002b54179091906401000000009004565b9350835191506020840192508183209050806001900494505b505050509392505050565b600062000ddc6200127b565b6000806000606060405190810160405280602b81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b3035766d6c6f675d000000000000000000000000000000000000000000815250935062000e9a6040805190810160405280600181526020017f7c00000000000000000000000000000000000000000000000000000000000000815250888662000973640100000000026200239417909291906401000000009004565b935062000ef66040805190810160405280600181526020017f7c00000000000000000000000000000000000000000000000000000000000000815250878662000973640100000000026200239417909291906401000000009004565b9350835191506020840192508183209050600094505b5050505092915050565b60005b60208210151562000f4157825184526020840193506020830192505b60208203915062000f19565b6001826020036101000a039050801983511681855116818117865250505b50505050565b62000f6f6200127b565b62000fb58362000f98848651620010576401000000000262003070179091906401000000009004565b62000fbe6401000000000262002b54179091906401000000009004565b90505b92915050565b62000fc86200127b565b6000806000845186510160405180591062000fe05750595b908082528060200260200182016040525b509350602086019250602085019150602084019050620010288184885162000f166401000000000262002f2e176401000000009004565b6200104d8651820183875162000f166401000000000262002f2e176401000000009004565b5b50505092915050565b620010616200127b565b60008060008092508591505b60008211156200109557600a828115156200108457fe5b04915082806001019350506200106d565b84831015620010a2578492505b82604051805910620010b15750595b908082528060200260200182016040525b5093506001830390505b600086111562001168576030600a87811515620010e557fe5b06017f010000000000000000000000000000000000000000000000000000000000000002848260000b8151811015156200111b57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600190039050600a868115156200115f57fe5b049550620010cc565b5b60008160000b121515620011ea5760307f010000000000000000000000000000000000000000000000000000000000000002848260000b815181101515620011ad57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508060019003905062001169565b5b50505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200123757805160ff191683800117855562001268565b8280016001018555821562001268579182015b82811115620012675782518255916020019190600101906200124a565b5b5090506200127791906200128f565b5090565b602060405190810160405280600081525090565b620012b491905b80821115620012b057600081600090555060010162001296565b5090565b90565b6132f680620012c76000396000f300606060405236156100fa576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630c5985a7146100ff5780630e24c52c1461015c578063180db1b4146102825780632ced7cef146102ab578063319af333146103a25780633823df95146104325780633ca6268e146104475780633e1092f2146104c15780633ffbd47f1461058057806341304fac1461062057806341c0e1b5146106915780634b5c4277146106a65780635e01eb5a1461075a57806387319e1e146107e9578063878487271461092e578063893d20e814610a25578063b60e72cc14610ab4578063dde6fe0114610b2e575b600080fd5b341561010a57600080fd5b61015a600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610b8b565b005b341561016757600080fd5b610280600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610b99565b005b341561028d57600080fd5b610295610e8e565b6040518082815260200191505060405180910390f35b34156102b657600080fd5b61038c600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610e99565b6040518082815260200191505060405180910390f35b34156103ad57600080fd5b61041c600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061100a565b6040518082815260200191505060405180910390f35b341561043d57600080fd5b61044561114c565b005b341561045257600080fd5b6104ab600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050611157565b6040518082815260200191505060405180910390f35b34156104cc57600080fd5b61057e600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611283565b005b341561058b57600080fd5b61061e600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506114c1565b005b341561062b57600080fd5b61067b600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506116ca565b6040518082815260200191505060405180910390f35b341561069c57600080fd5b6106a46117a1565b005b34156106b157600080fd5b610744600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611898565b6040518082815260200191505060405180910390f35b341561076557600080fd5b61076d6119bc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107ae5780820151818401525b602081019050610792565b50505050905090810190601f1680156107db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107f457600080fd5b61092c600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506119e9565b005b341561093957600080fd5b610a0f600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611d05565b6040518082815260200191505060405180910390f35b3415610a3057600080fd5b610a38611df2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a795780820151818401525b602081019050610a5d565b50505050905090810190601f168015610aa65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610abf57600080fd5b610b18600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050611e40565b6040518082815260200191505060405180910390f35b3415610b3957600080fd5b610b89600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611f6c565b005b610b9481612026565b505b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e24c52c868686866000604051602001526040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b83811015610c5e5780820151818401525b602081019050610c42565b50505050905090810190601f168015610c8b5780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b83811015610cc55780820151818401525b602081019050610ca9565b50505050905090810190601f168015610cf25780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b83811015610d2c5780820151818401525b602081019050610d10565b50505050905090810190601f168015610d595780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b83811015610d935780820151818401525b602081019050610d77565b50505050905090810190601f168015610dc05780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1515610de457600080fd5b6102c65a03f11515610df557600080fd5b505050604051805190509050600081141515610e7857610e72606060405190810160405280602381526020017f726567697374657220636f6e74726163743a206661696c65642e2061626f727481526020017f21212100000000000000000000000000000000000000000000000000000000008152508685610e99565b50610e87565b610e858585858530612141565b505b5050505050565b600060025490505b90565b6000610ea36132a2565b6000806000606060405190810160405280602b81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b3035766d6c6f675d0000000000000000000000000000000000000000008152509350610f516040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525089866123949092919063ffffffff16565b9350610f9d6040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525088866123949092919063ffffffff16565b9350610fe96040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525087866123949092919063ffffffff16565b9350835191506020840192508183209050600094505b505050509392505050565b60006110146132a2565b6000806000606060405190810160405280602b81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b3035766d6c6f675d00000000000000000000000000000000000000000081525093506110c26040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525088866123949092919063ffffffff16565b935061112c6040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525061111c8873ffffffffffffffffffffffffffffffffffffffff16612432565b866123949092919063ffffffff16565b9350835191506020840192508183209050600094505b5050505092915050565b61115461263f565b5b565b60006111616132a2565b6000806000606060405190810160405280602b81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b3035766d6c6f675d000000000000000000000000000000000000000000815250935061120f6040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525088866123949092919063ffffffff16565b93506112636040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525061125388612732565b866123949092919063ffffffff16565b9350835191506020840192508183209050600094505b5050505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e1092f28585856000604051602001526040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838103835286818151815260200191508051906020019080838360005b838110156113715780820151818401525b602081019050611355565b50505050905090810190601f16801561139e5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156113d85780820151818401525b6020810190506113bc565b50505050905090810190601f1680156114055780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b151561142657600080fd5b6102c65a03f1151561143757600080fd5b5050506040518051905090506000811415156114ba576114b4606060405190810160405280603481526020017f7265676973746572206368616e67654d6f64756c6552656769737465724f776e81526020017f65723a206661696c65642e2061626f72742121210000000000000000000000008152508585610e99565b506114bb565b5b50505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ffbd47f84846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561157c5780820151818401525b602081019050611560565b50505050905090810190601f1680156115a95780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156115e35780820151818401525b6020810190506115c7565b50505050905090810190601f1680156116105780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b151561163057600080fd5b6102c65a03f1151561164157600080fd5b5050506040518051905090506000811415156116c4576116be606060405190810160405280602181526020017f7265676973746572206d6f64756c653a206661696c65642e2061626f7274212181526020017f21000000000000000000000000000000000000000000000000000000000000008152508484610e99565b506116c5565b5b505050565b60006116d46132a2565b6000806000606060405190810160405280602b81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b3035766d6c6f675d00000000000000000000000000000000000000000081525093506117826040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525087866123949092919063ffffffff16565b9350835191506020840192508183209050600094505b50505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117fc57611896565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166326d7b3b46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b151561188157600080fd5b6102c65a03f1151561189257600080fd5b5050505b565b60006118a26132a2565b6000806000606060405190810160405280602b81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b3035766d6c6f675d00000000000000000000000000000000000000000081525093506119506040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525088866123949092919063ffffffff16565b935061199c6040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525087866123949092919063ffffffff16565b9350835191506020840192508183209050600094505b5050505092915050565b6119c46132a2565b6119e33373ffffffffffffffffffffffffffffffffffffffff1661290d565b90505b90565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166387319e1e87878787876000604051602001526040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001806020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200185810385528a818151815260200191508051906020019080838360005b83811015611ae15780820151818401525b602081019050611ac5565b50505050905090810190601f168015611b0e5780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019080838360005b83811015611b485780820151818401525b602081019050611b2c565b50505050905090810190601f168015611b755780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b83811015611baf5780820151818401525b602081019050611b93565b50505050905090810190601f168015611bdc5780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b83811015611c165780820151818401525b602081019050611bfa565b50505050905090810190601f168015611c435780820380516001836020036101000a031916815260200191505b509950505050505050505050602060405180830381600087803b1515611c6857600080fd5b6102c65a03f11515611c7957600080fd5b505050604051805190509050600081141515611cfc57611cf6606060405190810160405280603681526020017f7265676973746572206368616e6765436f6e747261637452656769737465724f81526020017f776e65723a206661696c65642e2061626f7274212121000000000000000000008152508786610e99565b50611cfd565b5b505050505050565b6000611d0f6132a2565b6000806000606060405190810160405280602d81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b3037777269746564625d000000000000000000000000000000000000008152509350611d90611d81896002612b1d565b85612b5490919063ffffffff16565b9350611daf611da0886004612b1d565b85612b5490919063ffffffff16565b9350611dce611dbf876009612b1d565b85612b5490919063ffffffff16565b9350835191506020840192508183209050806001900494505b505050509392505050565b611dfa6132a2565b611e3a6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661290d565b90505b90565b6000611e4a6132a2565b6000806000606060405190810160405280602b81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b3035766d6c6f675d0000000000000000000000000000000000000000008152509350611ef86040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525088866123949092919063ffffffff16565b9350611f4c6040805190810160405280600181526020017f7c00000000000000000000000000000000000000000000000000000000000000815250611f3c88612bbe565b866123949092919063ffffffff16565b9350835191506020840192508183209050600094505b5050505092915050565b61202161201c8260038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120095780601f10611fde57610100808354040283529160200191612009565b820191906000526020600020905b815481529060010190602001808311611fec57829003601f168201915b5050505050612d0990919063ffffffff16565b612e8e565b505b50565b60006120306132a2565b600080600080865114156120ad576120a3606060405190810160405280602481526020017f4552524f523a204c69624a736f6e2e7075736820616e20656d707479206a736f81526020017f6e21212100000000000000000000000000000000000000000000000000000000815250612e8e565b5060009450612138565b606060405190810160405280602e81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b30384a736f6e507573685d000000000000000000000000000000000000815250935061211f8685612b5490919063ffffffff16565b9350835191506020840192508183209050806001900494505b50505050919050565b600061214b6132a2565b6121956040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525087896123949092919063ffffffff16565b90506121e16040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525086836123949092919063ffffffff16565b905061222d6040805190810160405280600181526020017f7c0000000000000000000000000000000000000000000000000000000000000081525085836123949092919063ffffffff16565b905061228d6040805190810160405280601381526020017f636f6e7472616374416464727c757064617465000000000000000000000000008152506122878573ffffffffffffffffffffffffffffffffffffffff16612432565b83611d05565b91508160001415156123135761230d6040805190810160405280600e81526020017f4f776e65724e616d65642e736f6c0000000000000000000000000000000000008152506040805190810160405280601b81526020017f75706461746520636f6e747261637441646472206661696c65642e0000000000815250611898565b50612389565b6123876040805190810160405280600e81526020017f4f776e65724e616d65642e736f6c0000000000000000000000000000000000008152506040805190810160405280601c81526020017f75706461746520636f6e74726163744164647220737563636573732e00000000815250611898565b505b5b5095945050505050565b61239c6132a2565b6000806000806000865188518a5101016040518059106123b95750595b908082528060200260200182016040525b509550602089019450602088019350602087019250602086019150600090506123f7818301868b51612f2e565b88518101905061240b818301858a51612f2e565b87518101905061241f818301848951612f2e565b8651810190505b50505050509392505050565b61243a6132a2565b600080602a60405180591061244c5750595b908082528060200260200182016040525b5092507f300000000000000000000000000000000000000000000000000000000000000083600081518110151561249057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008360018151811015156124f057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350602991505b60028260ff1610151561263757600f8416905060108481151561254457fe5b049350600a8160ff1610156125bf57603081017f010000000000000000000000000000000000000000000000000000000000000002838360ff1681518110151561258a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061262a565b6061600a8203017f010000000000000000000000000000000000000000000000000000000000000002838360ff168151811015156125f957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b5b81600190039150612525565b5b5050919050565b6126476132a2565b6000806000606060405190810160405280602d81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b30374a736f6e506f705d00000000000000000000000000000000000000815250935060008451141561271c5761271a606060405190810160405280602581526020017f4552524f523a204c69624a736f6e2e706f7020616e206172677320696e76616c81526020017f6964212121000000000000000000000000000000000000000000000000000000815250612e8e565b505b8351915060208401925081832090505b50505050565b61273a6132a2565b600080600080600080871415612787576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509550612903565b869450600193506000925060008712156127ae578660000394506000935082806001019350505b8491505b60008211156127d757600a828115156127c757fe5b04915082806001019350506127b2565b8260ff166040518059106127e85750595b908082528060200260200182016040525b509550831515612864577f2d0000000000000000000000000000000000000000000000000000000000000086600081518110151561283357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b6001830390505b6000851115612902576030600a8681151561288257fe5b06017f01000000000000000000000000000000000000000000000000000000000000000286828060019003935060ff168151811015156128be57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858115156128fa57fe5b04945061286b565b5b5050505050919050565b6129156132a2565b61291d6132b6565b60008060008060286040518059106129325750595b908082528060200260200182016040525b509450600093505b6014841015612b0f578360130360080260020a8773ffffffffffffffffffffffffffffffffffffffff1681151561297e57fe5b047f01000000000000000000000000000000000000000000000000000000000000000292506010837f0100000000000000000000000000000000000000000000000000000000000000900460ff168115156129d557fe5b047f0100000000000000000000000000000000000000000000000000000000000000029150817f01000000000000000000000000000000000000000000000000000000000000009004601002837f01000000000000000000000000000000000000000000000000000000000000009004037f0100000000000000000000000000000000000000000000000000000000000000029050612a7382612f7b565b8585600202815181101515612a8457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612abd81612f7b565b8560018660020201815181101515612ad157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b838060010194505061294b565b8495505b5050505050919050565b612b256132a2565b612b4b83612b3d84865161307090919063ffffffff16565b612b5490919063ffffffff16565b90505b92915050565b612b5c6132a2565b60008060008451865101604051805910612b735750595b908082528060200260200182016040525b509350602086019250602085019150602084019050612ba581848851612f2e565b612bb486518201838751612f2e565b5b50505092915050565b612bc66132a2565b600080600080851415612c10576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509350612d01565b600092508491505b6000821115612c3d57600a82811515612c2d57fe5b0491508280600101935050612c18565b8260ff16604051805910612c4e5750595b908082528060200260200182016040525b5093506001830390505b6000851115612d00576030600a86811515612c8057fe5b06017f01000000000000000000000000000000000000000000000000000000000000000284828060019003935060ff16815181101515612cbc57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85811515612cf857fe5b049450612c69565b5b505050919050565b612d116132a2565b600080612d1c6132a2565b6000806000612d296132a2565b600060206040519081016040528060008152509850612d488b8b6131fe565b97506000881115612e7f5787604051805910612d615750595b908082528060200260200182016040525b509850602089019650606060405190810160405280603081526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b31304a736f6e5265616445785d000000000000000000000000000000008152509550612ded8a87612b5490919063ffffffff16565b9550612e416040805190810160405280600a81526020017f7c242526402a5e23217c00000000000000000000000000000000000000000000815250612e3189612bbe565b886123949092919063ffffffff16565b95508551935060208601945083852092506020604051908101604052806000815250915082600190049050600081141515612e7e57819850612e80565b5b5b505050505050505092915050565b6000612e986132a2565b6000806000606060405190810160405280602b81526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b3035766d6c6f675d0000000000000000000000000000000000000000008152509350612f0f8685612b5490919063ffffffff16565b9350835191506020840192508183209050600094505b50505050919050565b60005b602082101515612f5757825184526020840193506020830192505b602082039150612f31565b6001826020036101000a039050801983511681855116818117865250505b50505050565b6000600a7f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101561301a576030827f01000000000000000000000000000000000000000000000000000000000000009004017f010000000000000000000000000000000000000000000000000000000000000002905061306b565b6057827f01000000000000000000000000000000000000000000000000000000000000009004017f010000000000000000000000000000000000000000000000000000000000000002905061306b565b5b919050565b6130786132a2565b60008060008092508591505b60008211156130a957600a8281151561309957fe5b0491508280600101935050613084565b848310156130b5578492505b826040518059106130c35750595b908082528060200260200182016040525b5093506001830390505b6000861115613175576030600a878115156130f557fe5b06017f010000000000000000000000000000000000000000000000000000000000000002848260000b81518110151561312a57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600190039050600a8681151561316d57fe5b0495506130de565b5b60008160000b1215156131f45760307f010000000000000000000000000000000000000000000000000000000000000002848260000b8151811015156131b857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600190039050613176565b5b50505092915050565b60006132086132a2565b6000806000606060405190810160405280603581526020017f5b3639643938643661303463343162343630356161636237626432663734626581526020017f655d5b31354a736f6e4b657945786973747345785d0000000000000000000000815250935061327f8685612b5490919063ffffffff16565b9350835191506020840192508183209050806001900494505b5050505092915050565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a723058200a26e55b2b78b97239a7a86eab2c22ea9c72cfa293df4e17b967fc07886b286e0029";

    public static final String FUNC_TESTPUSH = "testPush";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_GETERRNO = "getErrno";

    public static final String FUNC_LOG = "log";

    public static final String FUNC_TESTPOP = "testPop";

    public static final String FUNC_CHANGEMODULEREGISTEROWNER = "changeModuleRegisterOwner";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_GETSENDER = "getSender";

    public static final String FUNC_CHANGECONTRACTREGISTEROWNER = "changeContractRegisterOwner";

    public static final String FUNC_WRITEDB = "writedb";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_TESTJSONREAD = "testJsonRead";

    @Deprecated
    protected JsonTest(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected JsonTest(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected JsonTest(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected JsonTest(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> testPush(String _json) {
        final Function function = new Function(
                FUNC_TESTPUSH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_json)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> register(String _moduleName, String _moduleVersion, String _contractName, String _contractVersion) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_moduleName), 
                new org.web3j.abi.datatypes.Utf8String(_moduleVersion), 
                new org.web3j.abi.datatypes.Utf8String(_contractName), 
                new org.web3j.abi.datatypes.Utf8String(_contractVersion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getErrno() {
        final Function function = new Function(FUNC_GETERRNO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> log(String _str, String _str2, String _str3) {
        final Function function = new Function(FUNC_LOG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_str), 
                new org.web3j.abi.datatypes.Utf8String(_str2), 
                new org.web3j.abi.datatypes.Utf8String(_str3)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> log(String _str, String _addr) {
        final Function function = new Function(FUNC_LOG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_str), 
                new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> testPop() {
        final Function function = new Function(
                FUNC_TESTPOP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> log(String _str, BigInteger _i) {
        final Function function = new Function(FUNC_LOG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_str), 
                new org.web3j.abi.datatypes.generated.Int256(_i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> changeModuleRegisterOwner(String _moduleName, String _moduleVersion, String _newOwner) {
        final Function function = new Function(
                FUNC_CHANGEMODULEREGISTEROWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_moduleName), 
                new org.web3j.abi.datatypes.Utf8String(_moduleVersion), 
                new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> register(String _moduleName, String _moduleVersion) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_moduleName), 
                new org.web3j.abi.datatypes.Utf8String(_moduleVersion)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> log(String _str) {
        final Function function = new Function(FUNC_LOG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_str)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> kill() {
        final Function function = new Function(
                FUNC_KILL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> log(String _str, String _str2) {
        final Function function = new Function(FUNC_LOG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_str), 
                new org.web3j.abi.datatypes.Utf8String(_str2)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getSender() {
        final Function function = new Function(FUNC_GETSENDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> changeContractRegisterOwner(String _moduleName, String _moduleVersion, String _contractName, String _contractVersion, String _newOwner) {
        final Function function = new Function(
                FUNC_CHANGECONTRACTREGISTEROWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_moduleName), 
                new org.web3j.abi.datatypes.Utf8String(_moduleVersion), 
                new org.web3j.abi.datatypes.Utf8String(_contractName), 
                new org.web3j.abi.datatypes.Utf8String(_contractVersion), 
                new org.web3j.abi.datatypes.Address(_newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> writedb(String _name, String _key, String _value) {
        final Function function = new Function(FUNC_WRITEDB, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_key), 
                new org.web3j.abi.datatypes.Utf8String(_value)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getOwner() {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> log(String _str, BigInteger _ui) {
        final Function function = new Function(FUNC_LOG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_str), 
                new org.web3j.abi.datatypes.generated.Uint256(_ui)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> testJsonRead(String _key) {
        final Function function = new Function(
                FUNC_TESTJSONREAD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<JsonTest> deploy(Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        return deployRemoteCall(JsonTest.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<JsonTest> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        return deployRemoteCall(JsonTest.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<JsonTest> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(JsonTest.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<JsonTest> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(JsonTest.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static JsonTest load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new JsonTest(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static JsonTest load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new JsonTest(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static JsonTest load(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        return new JsonTest(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static JsonTest load(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        return new JsonTest(contractAddress, web3j, transactionManager, contractGasProvider);
    }
}
